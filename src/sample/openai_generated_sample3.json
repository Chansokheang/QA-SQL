[
    {
        "question_id": 0,
        "db_id": "racing",
        "question": "What is the total number of points scored by McLaren in race 18?",
        "evidence": "Points scored by McLaren can be found in `constructorResults` where `constructorId` = 1 and `raceId` = 18.",
        "SQL": "SELECT SUM(points) FROM `constructorResults` WHERE `constructorId` = 1 AND `raceId` = 18;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 1,
        "db_id": "racing",
        "question": "Which driver had the fastest lap time in race 1?",
        "evidence": "Fastest lap time can be found in `lapTimes` where `raceId` = 1, ordered by `milliseconds`.",
        "SQL": "SELECT d.forename, d.surname FROM `lapTimes` lt JOIN `drivers` d ON lt.driverId = d.driverId WHERE lt.raceId = 1 ORDER BY lt.milliseconds ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 2,
        "db_id": "racing",
        "question": "How many races did Lewis Hamilton win in 2009?",
        "evidence": "Wins by Lewis Hamilton can be found in `results` where `driverId` = 1 and `position` = 1, joined with `races` for year 2009.",
        "SQL": "SELECT COUNT(*) FROM `results` r JOIN `races` ra ON r.raceId = ra.raceId WHERE r.driverId = 1 AND r.position = 1 AND ra.year = 2009;",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 3,
        "db_id": "racing",
        "question": "What is the average position of BMW Sauber in race 18?",
        "evidence": "Average position can be calculated from `constructorStandings` where `constructorId` = 2 and `raceId` = 18.",
        "SQL": "SELECT AVG(position) FROM `constructorStandings` WHERE `constructorId` = 2 AND `raceId` = 18;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 4,
        "db_id": "racing",
        "question": "Which constructor had the most wins in 2009?",
        "evidence": "Wins by constructors can be aggregated from `constructorStandings` joined with `races` for year 2009.",
        "SQL": "SELECT c.name, SUM(cs.wins) as total_wins FROM `constructorStandings` cs JOIN `constructors` c ON cs.constructorId = c.constructorId JOIN `races` r ON cs.raceId = r.raceId WHERE r.year = 2009 GROUP BY cs.constructorId ORDER BY total_wins DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 5,
        "db_id": "racing",
        "question": "What is the nationality of the driver who finished third in race 18?",
        "evidence": "Driver's nationality can be found in `drivers` joined with `results` where `position` = 3 and `raceId` = 18.",
        "SQL": "SELECT d.nationality FROM `results` r JOIN `drivers` d ON r.driverId = d.driverId WHERE r.raceId = 18 AND r.position = 3;",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 6,
        "db_id": "racing",
        "question": "What is the total number of pit stops made by driver 1 in race 841?",
        "evidence": "Total pit stops can be counted from `pitStops` where `driverId` = 1 and `raceId` = 841.",
        "SQL": "SELECT COUNT(*) FROM `pitStops` WHERE `driverId` = 1 AND `raceId` = 841;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 7,
        "db_id": "racing",
        "question": "Which circuit hosted the Chinese Grand Prix in 2009?",
        "evidence": "Circuit information can be found in `circuits` joined with `races` where `name` = 'Chinese Grand Prix' and `year` = 2009.",
        "SQL": "SELECT c.name FROM `races` r JOIN `circuits` c ON r.circuitId = c.circuitId WHERE r.name = 'Chinese Grand Prix' AND r.year = 2009;",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 8,
        "db_id": "racing",
        "question": "What is the position of Nico Rosberg in the driver standings for race 18?",
        "evidence": "Position in driver standings can be found in `driverStandings` where `driverId` = 3 and `raceId` = 18.",
        "SQL": "SELECT position FROM `driverStandings` WHERE `driverId` = 3 AND `raceId` = 18;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 9,
        "db_id": "racing",
        "question": "Which driver had the highest number of wins in the 2009 season?",
        "evidence": "Wins by drivers can be aggregated from `driverStandings` joined with `races` for year 2009.",
        "SQL": "SELECT d.forename, d.surname, SUM(ds.wins) as total_wins FROM `driverStandings` ds JOIN `drivers` d ON ds.driverId = d.driverId JOIN `races` r ON ds.raceId = r.raceId WHERE r.year = 2009 GROUP BY ds.driverId ORDER BY total_wins DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 10,
        "db_id": "racing",
        "question": "What is the total duration of all pit stops made by driver 1 in race 841?",
        "evidence": "Total duration can be summed from `pitStops` where `driverId` = 1 and `raceId` = 841.",
        "SQL": "SELECT SUM(milliseconds) FROM `pitStops` WHERE `driverId` = 1 AND `raceId` = 841;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 11,
        "db_id": "racing",
        "question": "Which constructor had the highest points in race 18?",
        "evidence": "Constructor points can be found in `constructorResults` where `raceId` = 18, ordered by `points`.",
        "SQL": "SELECT c.name FROM `constructorResults` cr JOIN `constructors` c ON cr.constructorId = c.constructorId WHERE cr.raceId = 18 ORDER BY cr.points DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 12,
        "db_id": "racing",
        "question": "What is the average lap time of Lewis Hamilton in race 1?",
        "evidence": "Average lap time can be calculated from `lapTimes` where `driverId` = 1 and `raceId` = 1.",
        "SQL": "SELECT AVG(milliseconds) FROM `lapTimes` WHERE `driverId` = 1 AND `raceId` = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 13,
        "db_id": "racing",
        "question": "Which driver had the most pit stops in race 841?",
        "evidence": "Pit stops can be counted from `pitStops` where `raceId` = 841, grouped by `driverId`.",
        "SQL": "SELECT d.forename, d.surname, COUNT(*) as total_stops FROM `pitStops` ps JOIN `drivers` d ON ps.driverId = d.driverId WHERE ps.raceId = 841 GROUP BY ps.driverId ORDER BY total_stops DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 14,
        "db_id": "racing",
        "question": "What is the position of McLaren in the constructor standings for race 18?",
        "evidence": "Position in constructor standings can be found in `constructorStandings` where `constructorId` = 1 and `raceId` = 18.",
        "SQL": "SELECT position FROM `constructorStandings` WHERE `constructorId` = 1 AND `raceId` = 18;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 15,
        "db_id": "racing",
        "question": "Which circuit is located in Malaysia?",
        "evidence": "Circuit location can be found in `circuits` where `country` = 'Malaysia'.",
        "SQL": "SELECT name FROM `circuits` WHERE `country` = 'Malaysia';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 16,
        "db_id": "racing",
        "question": "What is the total number of laps completed by driver 2 in race 18?",
        "evidence": "Total laps can be found in `results` where `driverId` = 2 and `raceId` = 18.",
        "SQL": "SELECT laps FROM `results` WHERE `driverId` = 2 AND `raceId` = 18;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 17,
        "db_id": "racing",
        "question": "Which driver had the slowest qualifying time in Q1 for race 18?",
        "evidence": "Slowest qualifying time in Q1 can be found in `qualifying` where `raceId` = 18, ordered by `q1`.",
        "SQL": "SELECT d.forename, d.surname FROM `qualifying` q JOIN `drivers` d ON q.driverId = d.driverId WHERE q.raceId = 18 ORDER BY q.q1 DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 18,
        "db_id": "racing",
        "question": "What is the total number of races held in 2009?",
        "evidence": "Total races can be counted from `races` where `year` = 2009.",
        "SQL": "SELECT COUNT(*) FROM `races` WHERE `year` = 2009;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 19,
        "db_id": "racing",
        "question": "Which driver had the fastest lap speed in race 18?",
        "evidence": "Fastest lap speed can be found in `results` where `raceId` = 18, ordered by `fastestLapSpeed`.",
        "SQL": "SELECT d.forename, d.surname FROM `results` r JOIN `drivers` d ON r.driverId = d.driverId WHERE r.raceId = 18 ORDER BY r.fastestLapSpeed DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 20,
        "db_id": "racing",
        "question": "What is the average number of points scored by constructors in race 18?",
        "evidence": "Average points can be calculated from `constructorResults` where `raceId` = 18.",
        "SQL": "SELECT AVG(points) FROM `constructorResults` WHERE `raceId` = 18;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 21,
        "db_id": "racing",
        "question": "Which driver had the most wins in the 2009 season?",
        "evidence": "Wins by drivers can be aggregated from `driverStandings` joined with `races` for year 2009.",
        "SQL": "SELECT d.forename, d.surname, SUM(ds.wins) as total_wins FROM `driverStandings` ds JOIN `drivers` d ON ds.driverId = d.driverId JOIN `races` r ON ds.raceId = r.raceId WHERE r.year = 2009 GROUP BY ds.driverId ORDER BY total_wins DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 22,
        "db_id": "racing",
        "question": "What is the total number of constructors that participated in race 18?",
        "evidence": "Total constructors can be counted from `constructorResults` where `raceId` = 18.",
        "SQL": "SELECT COUNT(DISTINCT constructorId) FROM `constructorResults` WHERE `raceId` = 18;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 23,
        "db_id": "racing",
        "question": "Which driver had the fastest qualifying time in Q3 for race 18?",
        "evidence": "Fastest qualifying time in Q3 can be found in `qualifying` where `raceId` = 18, ordered by `q3`.",
        "SQL": "SELECT d.forename, d.surname FROM `qualifying` q JOIN `drivers` d ON q.driverId = d.driverId WHERE q.raceId = 18 ORDER BY q.q3 ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 24,
        "db_id": "racing",
        "question": "What is the total number of drivers who finished the race in race 18?",
        "evidence": "Drivers who finished the race can be counted from `results` where `raceId` = 18 and `statusId` = 1.",
        "SQL": "SELECT COUNT(*) FROM `results` WHERE `raceId` = 18 AND `statusId` = 1;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 25,
        "db_id": "soccer",
        "question": "What is the name of the league in Belgium?",
        "evidence": "League.name is unique and can be retrieved using country_id from Country table.",
        "SQL": "SELECT name FROM `League` WHERE country_id = (SELECT id FROM `Country` WHERE name = 'Belgium');",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 26,
        "db_id": "soccer",
        "question": "How many matches were played in the 2008/2009 season?",
        "evidence": "Count matches by season using COUNT(*) WHERE season = '2008/2009'.",
        "SQL": "SELECT COUNT(*) FROM `Match` WHERE season = '2008/2009';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 27,
        "db_id": "soccer",
        "question": "Which country has the most leagues?",
        "evidence": "Count leagues per country using GROUP BY country_id and ORDER BY COUNT(*) DESC.",
        "SQL": "SELECT c.name, COUNT(l.id) as league_count FROM `League` l JOIN `Country` c ON l.country_id = c.id GROUP BY l.country_id ORDER BY league_count DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 28,
        "db_id": "soccer",
        "question": "What is the average number of goals scored by home teams in the England Premier League?",
        "evidence": "Average home_team_goal using AVG(home_team_goal) WHERE league_id corresponds to 'England Premier League'.",
        "SQL": "SELECT AVG(home_team_goal) FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'England Premier League');",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 29,
        "db_id": "soccer",
        "question": "Which player has the highest overall rating?",
        "evidence": "Find maximum overall_rating using MAX(overall_rating) and join with Player table.",
        "SQL": "SELECT p.player_name, pa.overall_rating FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id ORDER BY pa.overall_rating DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 30,
        "db_id": "soccer",
        "question": "List all teams that played in the Belgium Jupiler League.",
        "evidence": "Retrieve team names using home_team_api_id and away_team_api_id from Match table where league_id corresponds to 'Belgium Jupiler League'.",
        "SQL": "SELECT DISTINCT t.team_long_name FROM `Match` m JOIN `Team` t ON m.home_team_api_id = t.team_api_id OR m.away_team_api_id = t.team_api_id WHERE m.league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League');",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 31,
        "db_id": "soccer",
        "question": "What is the total number of goals scored in the France Ligue 1?",
        "evidence": "Sum of home_team_goal and away_team_goal using SUM(home_team_goal + away_team_goal) WHERE league_id corresponds to 'France Ligue 1'.",
        "SQL": "SELECT SUM(home_team_goal + away_team_goal) FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'France Ligue 1');",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 32,
        "db_id": "soccer",
        "question": "Which team has the highest build-up play speed?",
        "evidence": "Find maximum buildUpPlaySpeed using MAX(buildUpPlaySpeed) and join with Team table.",
        "SQL": "SELECT t.team_long_name, ta.buildUpPlaySpeed FROM `Team_Attributes` ta JOIN `Team` t ON ta.team_api_id = t.team_api_id ORDER BY ta.buildUpPlaySpeed DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 33,
        "db_id": "soccer",
        "question": "How many players have a preferred foot of 'right'?",
        "evidence": "Count players with preferred_foot = 'right' using COUNT(*) in Player_Attributes.",
        "SQL": "SELECT COUNT(DISTINCT player_api_id) FROM `Player_Attributes` WHERE preferred_foot = 'right';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 34,
        "db_id": "soccer",
        "question": "What is the average height of players in the database?",
        "evidence": "Average height using AVG(height) from Player table.",
        "SQL": "SELECT AVG(height) FROM `Player`;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 35,
        "db_id": "soccer",
        "question": "Which match had the highest number of total goals scored?",
        "evidence": "Find maximum total goals using ORDER BY (home_team_goal + away_team_goal) DESC.",
        "SQL": "SELECT id, home_team_goal + away_team_goal as total_goals FROM `Match` ORDER BY total_goals DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 36,
        "db_id": "soccer",
        "question": "Which player has the most records in the Player_Attributes table?",
        "evidence": "Count records per player using COUNT(*) GROUP BY player_api_id and ORDER BY COUNT(*) DESC.",
        "SQL": "SELECT p.player_name, COUNT(pa.id) as record_count FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id GROUP BY pa.player_api_id ORDER BY record_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 37,
        "db_id": "soccer",
        "question": "What is the average potential of players born after 1990?",
        "evidence": "Average potential using AVG(potential) WHERE birthday > '1990-01-01'.",
        "SQL": "SELECT AVG(pa.potential) FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id WHERE p.birthday > '1990-01-01';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 38,
        "db_id": "soccer",
        "question": "Which team has the most aggressive defense?",
        "evidence": "Find maximum defenceAggression using MAX(defenceAggression) and join with Team table.",
        "SQL": "SELECT t.team_long_name, ta.defenceAggression FROM `Team_Attributes` ta JOIN `Team` t ON ta.team_api_id = t.team_api_id ORDER BY ta.defenceAggression DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 39,
        "db_id": "soccer",
        "question": "How many unique players have played in the Belgium Jupiler League?",
        "evidence": "Count distinct player_api_id using home_player_1 to home_player_11 and away_player_1 to away_player_11.",
        "SQL": "SELECT COUNT(DISTINCT player_api_id) FROM (SELECT home_player_1 as player_api_id FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_2 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_3 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_4 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_5 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_6 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_7 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_8 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_9 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_10 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT home_player_11 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_1 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_2 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_3 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_4 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_5 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_6 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_7 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_8 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_9 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_10 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League') UNION SELECT away_player_11 FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League')) as players;",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 40,
        "db_id": "soccer",
        "question": "What is the average weight of players who have an overall rating above 70?",
        "evidence": "Average weight using AVG(weight) where overall_rating > 70.",
        "SQL": "SELECT AVG(p.weight) FROM `Player` p JOIN `Player_Attributes` pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating > 70;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 41,
        "db_id": "soccer",
        "question": "Which league had the most matches played in the 2008/2009 season?",
        "evidence": "Count matches per league using COUNT(*) GROUP BY league_id and ORDER BY COUNT(*) DESC.",
        "SQL": "SELECT l.name, COUNT(m.id) as match_count FROM `Match` m JOIN `League` l ON m.league_id = l.id WHERE m.season = '2008/2009' GROUP BY m.league_id ORDER BY match_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 42,
        "db_id": "soccer",
        "question": "What is the average number of goals scored by away teams in the Scotland Premier League?",
        "evidence": "Average away_team_goal using AVG(away_team_goal) WHERE league_id corresponds to 'Scotland Premier League'.",
        "SQL": "SELECT AVG(away_team_goal) FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Scotland Premier League');",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 43,
        "db_id": "soccer",
        "question": "Which player has the highest potential in the database?",
        "evidence": "Find maximum potential using MAX(potential) and join with Player table.",
        "SQL": "SELECT p.player_name, pa.potential FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id ORDER BY pa.potential DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 44,
        "db_id": "soccer",
        "question": "How many teams have a build-up play speed greater than 60?",
        "evidence": "Count teams with buildUpPlaySpeed > 60 using COUNT(DISTINCT team_api_id).",
        "SQL": "SELECT COUNT(DISTINCT team_api_id) FROM `Team_Attributes` WHERE buildUpPlaySpeed > 60;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 45,
        "db_id": "soccer",
        "question": "Which team has the widest defense?",
        "evidence": "Find maximum defenceTeamWidth using MAX(defenceTeamWidth) and join with Team table.",
        "SQL": "SELECT t.team_long_name, ta.defenceTeamWidth FROM `Team_Attributes` ta JOIN `Team` t ON ta.team_api_id = t.team_api_id ORDER BY ta.defenceTeamWidth DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 46,
        "db_id": "soccer",
        "question": "What is the average crossing ability of players in the database?",
        "evidence": "Average crossing using AVG(crossing) from Player_Attributes table.",
        "SQL": "SELECT AVG(crossing) FROM `Player_Attributes`;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 47,
        "db_id": "soccer",
        "question": "Which player has the most records with a preferred foot of 'left'?",
        "evidence": "Count records per player with preferred_foot = 'left' using COUNT(*) GROUP BY player_api_id and ORDER BY COUNT(*) DESC.",
        "SQL": "SELECT p.player_name, COUNT(pa.id) as record_count FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left' GROUP BY pa.player_api_id ORDER BY record_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 48,
        "db_id": "soccer",
        "question": "What is the average number of goals scored in matches where the home team won?",
        "evidence": "Average total goals using AVG(home_team_goal + away_team_goal) WHERE home_team_goal > away_team_goal.",
        "SQL": "SELECT AVG(home_team_goal + away_team_goal) FROM `Match` WHERE home_team_goal > away_team_goal;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 49,
        "db_id": "soccer",
        "question": "Which country has the least number of leagues?",
        "evidence": "Count leagues per country using COUNT(*) GROUP BY country_id and ORDER BY COUNT(*) ASC.",
        "SQL": "SELECT c.name, COUNT(l.id) as league_count FROM `League` l JOIN `Country` c ON l.country_id = c.id GROUP BY l.country_id ORDER BY league_count ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 50,
        "db_id": "superhero_db",
        "question": "What is the full name of the superhero with ID 38?",
        "evidence": "superhero ID 38 refers to superhero.id = 38",
        "SQL": "SELECT full_name FROM `superhero` WHERE id = 38;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 51,
        "db_id": "superhero_db",
        "question": "How many superheroes are there in total?",
        "evidence": "Total superheroes can be counted using COUNT(*)",
        "SQL": "SELECT COUNT(*) FROM `superhero`;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 52,
        "db_id": "superhero_db",
        "question": "What is the average height of superheroes?",
        "evidence": "Average height can be calculated using AVG(height_cm)",
        "SQL": "SELECT AVG(height_cm) FROM `superhero`;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 53,
        "db_id": "superhero_db",
        "question": "Which superhero has the highest intelligence attribute?",
        "evidence": "Highest intelligence can be found using MAX(attribute_value) for attribute_id = 1",
        "SQL": "SELECT s.superhero_name FROM `hero_attribute` ha JOIN `superhero` s ON ha.hero_id = s.id WHERE ha.attribute_id = 1 ORDER BY ha.attribute_value DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 54,
        "db_id": "superhero_db",
        "question": "List all superheroes with 'Good' alignment.",
        "evidence": "Good alignment refers to alignment_id = 1",
        "SQL": "SELECT superhero_name FROM `superhero` WHERE alignment_id = 1;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 55,
        "db_id": "superhero_db",
        "question": "What is the most common eye color among superheroes?",
        "evidence": "Most common color refers to COUNT(superhero.id) DESC",
        "SQL": "SELECT c.colour FROM `superhero` s JOIN `colour` c ON s.eye_colour_id = c.id GROUP BY c.colour ORDER BY COUNT(s.id) DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 56,
        "db_id": "superhero_db",
        "question": "How many superheroes are published by ABC Studios?",
        "evidence": "ABC Studios refers to publisher_id = 2",
        "SQL": "SELECT COUNT(*) FROM `superhero` WHERE publisher_id = 2;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 57,
        "db_id": "superhero_db",
        "question": "Which superhero has the maximum weight?",
        "evidence": "Maximum weight can be found using MAX(weight_kg)",
        "SQL": "SELECT superhero_name FROM `superhero` ORDER BY weight_kg DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 58,
        "db_id": "superhero_db",
        "question": "What is the name of the superhero with ID 294?",
        "evidence": "superhero ID 294 refers to superhero.id = 294",
        "SQL": "SELECT superhero_name FROM `superhero` WHERE id = 294;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 59,
        "db_id": "superhero_db",
        "question": "List all female superheroes.",
        "evidence": "Female superheroes refer to gender_id = 2",
        "SQL": "SELECT superhero_name FROM `superhero` WHERE gender_id = 2;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 60,
        "db_id": "superhero_db",
        "question": "Which superhero has the lowest strength attribute?",
        "evidence": "Lowest strength can be found using MIN(attribute_value) for attribute_id = 2",
        "SQL": "SELECT s.superhero_name FROM `hero_attribute` ha JOIN `superhero` s ON ha.hero_id = s.id WHERE ha.attribute_id = 2 ORDER BY ha.attribute_value ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 61,
        "db_id": "superhero_db",
        "question": "What is the total weight of all superheroes combined?",
        "evidence": "Total weight can be calculated using SUM(weight_kg)",
        "SQL": "SELECT SUM(weight_kg) FROM `superhero`;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 62,
        "db_id": "superhero_db",
        "question": "How many superheroes have 'Neutral' alignment?",
        "evidence": "Neutral alignment refers to alignment_id = 3",
        "SQL": "SELECT COUNT(*) FROM `superhero` WHERE alignment_id = 3;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 63,
        "db_id": "superhero_db",
        "question": "Which superhero has the most superpowers?",
        "evidence": "Most superpowers can be found using COUNT(power_id) GROUP BY hero_id",
        "SQL": "SELECT s.superhero_name FROM `hero_power` hp JOIN `superhero` s ON hp.hero_id = s.id GROUP BY hp.hero_id ORDER BY COUNT(hp.power_id) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 64,
        "db_id": "superhero_db",
        "question": "List all superheroes with 'Alien' race.",
        "evidence": "Alien race refers to race_id = 2",
        "SQL": "SELECT superhero_name FROM `superhero` WHERE race_id = 2;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 65,
        "db_id": "superhero_db",
        "question": "What is the average weight of superheroes published by Dark Horse Comics?",
        "evidence": "Dark Horse Comics refers to publisher_id = 3",
        "SQL": "SELECT AVG(weight_kg) FROM `superhero` WHERE publisher_id = 3;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 66,
        "db_id": "superhero_db",
        "question": "Which superhero has the longest full name?",
        "evidence": "Longest full name can be found using LENGTH(full_name) ORDER BY DESC",
        "SQL": "SELECT superhero_name FROM `superhero` ORDER BY LENGTH(full_name) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 67,
        "db_id": "superhero_db",
        "question": "How many superheroes have 'No Colour' as their eye color?",
        "evidence": "No Colour refers to eye_colour_id = 1",
        "SQL": "SELECT COUNT(*) FROM `superhero` WHERE eye_colour_id = 1;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 68,
        "db_id": "superhero_db",
        "question": "List all superheroes with a height greater than 200 cm.",
        "evidence": "Height greater than 200 cm can be found using height_cm > 200",
        "SQL": "SELECT superhero_name FROM `superhero` WHERE height_cm > 200;",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 69,
        "db_id": "superhero_db",
        "question": "Which superhero has the shortest height?",
        "evidence": "Shortest height can be found using MIN(height_cm)",
        "SQL": "SELECT superhero_name FROM `superhero` ORDER BY height_cm ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 70,
        "db_id": "superhero_db",
        "question": "What is the total number of superpowers possessed by all superheroes?",
        "evidence": "Total superpowers can be counted using COUNT(*) in hero_power",
        "SQL": "SELECT COUNT(*) FROM `hero_power`;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 71,
        "db_id": "superhero_db",
        "question": "List all superheroes with 'Auburn' hair color.",
        "evidence": "Auburn hair color refers to hair_colour_id = 3",
        "SQL": "SELECT superhero_name FROM `superhero` WHERE hair_colour_id = 3;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 72,
        "db_id": "superhero_db",
        "question": "Which superhero has the highest speed attribute?",
        "evidence": "Highest speed can be found using MAX(attribute_value) for attribute_id = 3",
        "SQL": "SELECT s.superhero_name FROM `hero_attribute` ha JOIN `superhero` s ON ha.hero_id = s.id WHERE ha.attribute_id = 3 ORDER BY ha.attribute_value DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 73,
        "db_id": "superhero_db",
        "question": "How many superheroes have a skin color of 'No Colour'?",
        "evidence": "No Colour refers to skin_colour_id = 1",
        "SQL": "SELECT COUNT(*) FROM `superhero` WHERE skin_colour_id = 1;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 74,
        "db_id": "superhero_db",
        "question": "What is the name of the superhero with the maximum number of attributes?",
        "evidence": "Maximum number of attributes can be found using COUNT(attribute_id) GROUP BY hero_id",
        "SQL": "SELECT s.superhero_name FROM `hero_attribute` ha JOIN `superhero` s ON ha.hero_id = s.id GROUP BY ha.hero_id ORDER BY COUNT(ha.attribute_id) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 75,
        "db_id": "education",
        "question": "What is the total enrollment for K-12 in Alameda County Office of Education for the academic year 2014-2015?",
        "evidence": "Total enrollment can be found by summing `Enrollment (K-12)` for Alameda County Office of Education in 2014-2015.",
        "SQL": "SELECT SUM(`Enrollment (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda' AND `Academic Year` = '2014-2015';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 76,
        "db_id": "education",
        "question": "Which school in Alameda County had the highest average SAT math score?",
        "evidence": "Use `AvgScrMath` to find the highest score in Alameda County.",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `AvgScrMath` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 77,
        "db_id": "education",
        "question": "How many schools in Alameda County are charter schools?",
        "evidence": "Count schools where `Charter` = 1 in Alameda County.",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda' AND `Charter` = 1;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 78,
        "db_id": "education",
        "question": "What is the ratio of schools in Colusa County to schools in Humboldt County?",
        "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)",
        "SQL": "SELECT (SELECT COUNT(*) FROM `schools` WHERE `County` = 'Colusa') / (SELECT COUNT(*) FROM `schools` WHERE `County` = 'Humboldt') AS ratio;",
        "difficulty": "challenge",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 79,
        "db_id": "education",
        "question": "List all schools in Alameda County that offer grades 9-12.",
        "evidence": "Filter schools in Alameda County with `GSoffered` containing '9-12'.",
        "SQL": "SELECT `School` FROM `schools` WHERE `County` = 'Alameda' AND `GSoffered` LIKE '%9-12%';",
        "difficulty": "moderate",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 80,
        "db_id": "education",
        "question": "What is the average percentage of students eligible for free meals in Alameda County for ages 5-17?",
        "evidence": "Average percentage can be calculated using `Percent (%) Eligible Free (Ages 5-17)` for Alameda County.",
        "SQL": "SELECT AVG(`Percent (%) Eligible Free (Ages 5-17)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 81,
        "db_id": "education",
        "question": "Which school in Alameda County had the highest percentage of students eligible for FRPM in K-12 during 2014-2015?",
        "evidence": "Use `Percent (%) Eligible FRPM (K-12)` to find the highest percentage in 2014-2015.",
        "SQL": "SELECT `School Name` FROM `frpm` WHERE `County Name` = 'Alameda' AND `Academic Year` = '2014-2015' ORDER BY `Percent (%) Eligible FRPM (K-12)` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 82,
        "db_id": "education",
        "question": "How many schools in Alameda County have a directly funded charter?",
        "evidence": "Count schools with `Charter` = 1 and `FundingType` = 'Directly funded' in Alameda County.",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda' AND `Charter` = 1 AND `FundingType` = 'Directly funded';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 83,
        "db_id": "education",
        "question": "What is the average SAT reading score for schools in Alameda County?",
        "evidence": "Average SAT reading score can be calculated using `AvgScrRead` for Alameda County.",
        "SQL": "SELECT AVG(`AvgScrRead`) FROM `satscores` WHERE `cname` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 84,
        "db_id": "education",
        "question": "Which school in Alameda County had the lowest average SAT writing score?",
        "evidence": "Use `AvgScrWrite` to find the lowest score in Alameda County.",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `AvgScrWrite` ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 85,
        "db_id": "education",
        "question": "What is the total number of students who took the SAT in Alameda County?",
        "evidence": "Total number of students can be found by summing `NumTstTakr` for Alameda County.",
        "SQL": "SELECT SUM(`NumTstTakr`) FROM `satscores` WHERE `cname` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 86,
        "db_id": "education",
        "question": "How many schools in Alameda County have a magnet program?",
        "evidence": "Count schools where `Magnet` = 1 in Alameda County.",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda' AND `Magnet` = 1;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 87,
        "db_id": "education",
        "question": "What is the average percentage of students eligible for FRPM in K-12 in Alameda County?",
        "evidence": "Average percentage can be calculated using `Percent (%) Eligible FRPM (K-12)` for Alameda County.",
        "SQL": "SELECT AVG(`Percent (%) Eligible FRPM (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 88,
        "db_id": "education",
        "question": "Which school in Alameda County had the highest number of students scoring above 1500 on the SAT?",
        "evidence": "Use `NumGE1500` to find the highest number in Alameda County.",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `NumGE1500` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 89,
        "db_id": "education",
        "question": "How many schools in Alameda County are currently active?",
        "evidence": "Count schools where `StatusType` = 'Active' in Alameda County.",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda' AND `StatusType` = 'Active';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 90,
        "db_id": "education",
        "question": "What is the average enrollment for 12th grade in Alameda County?",
        "evidence": "Average enrollment can be calculated using `enroll12` for Alameda County.",
        "SQL": "SELECT AVG(`enroll12`) FROM `satscores` WHERE `cname` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 91,
        "db_id": "education",
        "question": "Which school in Alameda County had the lowest percentage of students eligible for free meals in K-12 during 2014-2015?",
        "evidence": "Use `Percent (%) Eligible Free (K-12)` to find the lowest percentage in 2014-2015.",
        "SQL": "SELECT `School Name` FROM `frpm` WHERE `County Name` = 'Alameda' AND `Academic Year` = '2014-2015' ORDER BY `Percent (%) Eligible Free (K-12)` ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 92,
        "db_id": "education",
        "question": "How many schools in Alameda County have a virtual program?",
        "evidence": "Count schools where `Virtual` = 'Y' in Alameda County.",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda' AND `Virtual` = 'Y';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 93,
        "db_id": "education",
        "question": "What is the total number of students eligible for free meals in K-12 in Alameda County?",
        "evidence": "Total number can be found by summing `Free Meal Count (K-12)` for Alameda County.",
        "SQL": "SELECT SUM(`Free Meal Count (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 94,
        "db_id": "education",
        "question": "Which school in Alameda County had the highest average SAT reading score?",
        "evidence": "Use `AvgScrRead` to find the highest score in Alameda County.",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `AvgScrRead` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 95,
        "db_id": "education",
        "question": "How many schools in Alameda County are closed?",
        "evidence": "Count schools where `StatusType` = 'Closed' in Alameda County.",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda' AND `StatusType` = 'Closed';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 96,
        "db_id": "education",
        "question": "What is the average percentage of students eligible for free meals in K-12 in Alameda County?",
        "evidence": "Average percentage can be calculated using `Percent (%) Eligible Free (K-12)` for Alameda County.",
        "SQL": "SELECT AVG(`Percent (%) Eligible Free (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 97,
        "db_id": "education",
        "question": "Which school in Alameda County had the lowest average SAT math score?",
        "evidence": "Use `AvgScrMath` to find the lowest score in Alameda County.",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `AvgScrMath` ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 98,
        "db_id": "education",
        "question": "How many schools in Alameda County have a directly funded charter and are active?",
        "evidence": "Count schools with `Charter` = 1, `FundingType` = 'Directly funded', and `StatusType` = 'Active' in Alameda County.",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda' AND `Charter` = 1 AND `FundingType` = 'Directly funded' AND `StatusType` = 'Active';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 99,
        "db_id": "education",
        "question": "What is the total number of students eligible for FRPM in K-12 in Alameda County?",
        "evidence": "Total number can be found by summing `FRPM Count (K-12)` for Alameda County.",
        "SQL": "SELECT SUM(`FRPM Count (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 100,
        "db_id": "cards_database",
        "question": "What is the name of the card with the earliest original release date?",
        "evidence": "The oldest card refers to MIN(originalReleaseDate).",
        "SQL": "SELECT name FROM `cards` WHERE `originalReleaseDate` = (SELECT MIN(`originalReleaseDate`) FROM `cards`);",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 101,
        "db_id": "cards_database",
        "question": "How many cards have a content warning?",
        "evidence": "Cards with content warning have hasContentWarning = 1.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE `hasContentWarning` = 1;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 102,
        "db_id": "cards_database",
        "question": "Which card has the highest converted mana cost?",
        "evidence": "Use MAX(convertedManaCost) to find the card with the highest cost.",
        "SQL": "SELECT name FROM `cards` WHERE `convertedManaCost` = (SELECT MAX(`convertedManaCost`) FROM `cards`);",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 103,
        "db_id": "cards_database",
        "question": "List all cards that are legal in the commander format.",
        "evidence": "Legal play refers to status = 'Legal' and play format refers to format = 'commander'.",
        "SQL": "SELECT c.name FROM `cards` c JOIN `legalities` l ON c.uuid = l.uuid WHERE l.format = 'commander' AND l.status = 'Legal';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 104,
        "db_id": "cards_database",
        "question": "What is the average converted mana cost of all black color cards?",
        "evidence": "Black color refers to colors = 'B'.",
        "SQL": "SELECT AVG(`convertedManaCost`) FROM `cards` WHERE `colors` = 'B';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 105,
        "db_id": "cards_database",
        "question": "Find the card names and their artists for all cards with the type 'Artifact'.",
        "evidence": "Artifact card refers to originalType = 'Artifact'.",
        "SQL": "SELECT name, artist FROM `cards` WHERE `originalType` = 'Artifact';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 106,
        "db_id": "cards_database",
        "question": "Which card has the most printings?",
        "evidence": "Use LENGTH(printings) to determine the number of printings.",
        "SQL": "SELECT name FROM `cards` ORDER BY LENGTH(`printings`) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 107,
        "db_id": "cards_database",
        "question": "How many cards are there with the artist 'Stephen Daniele'?",
        "evidence": "Stephen Daniele is artist.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE `artist` = 'Stephen Daniele';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 108,
        "db_id": "cards_database",
        "question": "List all cards that have a foreign language translation.",
        "evidence": "Foreign language refers to language in foreign_data.",
        "SQL": "SELECT DISTINCT c.name FROM `cards` c JOIN `foreign_data` f ON c.uuid = f.uuid;",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 109,
        "db_id": "cards_database",
        "question": "What is the total number of unique card types in the database?",
        "evidence": "Use DISTINCT on the type column.",
        "SQL": "SELECT COUNT(DISTINCT `type`) FROM `cards`;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 110,
        "db_id": "cards_database",
        "question": "Which card has the longest flavor text?",
        "evidence": "Use LENGTH(flavorText) to find the longest text.",
        "SQL": "SELECT name FROM `cards` ORDER BY LENGTH(`flavorText`) DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 111,
        "db_id": "cards_database",
        "question": "Find all cards that are both legal in legacy format and have a content warning.",
        "evidence": "Legal play refers to status = 'Legal' and play format refers to format = 'legacy'.",
        "SQL": "SELECT c.name FROM `cards` c JOIN `legalities` l ON c.uuid = l.uuid WHERE l.format = 'legacy' AND l.status = 'Legal' AND c.hasContentWarning = 1;",
        "difficulty": "challenge",
        "question_type": "reasoning",
        "is_valid": true
    },
    {
        "question_id": 112,
        "db_id": "cards_database",
        "question": "What is the most common rarity among all cards?",
        "evidence": "Use COUNT and GROUP BY on rarity.",
        "SQL": "SELECT rarity FROM `cards` GROUP BY rarity ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 113,
        "db_id": "cards_database",
        "question": "List the names of all cards that have a mythic rarity.",
        "evidence": "Mythic card refers to rarity = 'mythic'.",
        "SQL": "SELECT name FROM `cards` WHERE `rarity` = 'mythic';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 114,
        "db_id": "cards_database",
        "question": "Which card has the most keywords associated with it?",
        "evidence": "Use LENGTH(keywords) to determine the number of keywords.",
        "SQL": "SELECT name FROM `cards` ORDER BY LENGTH(`keywords`) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 115,
        "db_id": "cards_database",
        "question": "How many cards have both foil and non-foil versions?",
        "evidence": "Cards with both versions have hasFoil = 1 and hasNonFoil = 1.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE `hasFoil` = 1 AND `hasNonFoil` = 1;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 116,
        "db_id": "cards_database",
        "question": "Find the card with the highest edhrec rank.",
        "evidence": "Use MIN(edhrecRank) to find the highest rank.",
        "SQL": "SELECT name FROM `cards` WHERE `edhrecRank` = (SELECT MIN(`edhrecRank`) FROM `cards`);",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 117,
        "db_id": "cards_database",
        "question": "List all cards that are oversized.",
        "evidence": "Oversized cards have isOversized = 1.",
        "SQL": "SELECT name FROM `cards` WHERE `isOversized` = 1;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 118,
        "db_id": "cards_database",
        "question": "Which card has the most variations?",
        "evidence": "Use LENGTH(variations) to determine the number of variations.",
        "SQL": "SELECT name FROM `cards` ORDER BY LENGTH(`variations`) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 119,
        "db_id": "cards_database",
        "question": "How many cards are there in the 'Tenth Edition' set?",
        "evidence": "Use setCode = '10E' to filter cards from the Tenth Edition.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE `setCode` = '10E';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 120,
        "db_id": "cards_database",
        "question": "List all cards that have a promo type.",
        "evidence": "Cards with promo types have non-null promoTypes.",
        "SQL": "SELECT name FROM `cards` WHERE `promoTypes` IS NOT NULL;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 121,
        "db_id": "cards_database",
        "question": "What is the total number of cards with a specific watermark?",
        "evidence": "Use COUNT and GROUP BY on watermark.",
        "SQL": "SELECT watermark, COUNT(*) FROM `cards` GROUP BY watermark;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 122,
        "db_id": "cards_database",
        "question": "Find all cards that are legal in both commander and legacy formats.",
        "evidence": "Legal play refers to status = 'Legal' and play format refers to format.",
        "SQL": "SELECT DISTINCT c.name FROM `cards` c JOIN `legalities` l1 ON c.uuid = l1.uuid JOIN `legalities` l2 ON c.uuid = l2.uuid WHERE l1.format = 'commander' AND l1.status = 'Legal' AND l2.format = 'legacy' AND l2.status = 'Legal';",
        "difficulty": "challenge",
        "question_type": "reasoning",
        "is_valid": true
    },
    {
        "question_id": 123,
        "db_id": "cards_database",
        "question": "Which card has the most foreign language translations?",
        "evidence": "Use COUNT and GROUP BY on uuid in foreign_data.",
        "SQL": "SELECT c.name FROM `cards` c JOIN `foreign_data` f ON c.uuid = f.uuid GROUP BY c.uuid ORDER BY COUNT(f.language) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 124,
        "db_id": "cards_database",
        "question": "What is the average number of printings per card?",
        "evidence": "Use AVG on LENGTH(printings) to find the average number of printings.",
        "SQL": "SELECT AVG(LENGTH(`printings`)) FROM `cards`;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 125,
        "db_id": "fuel_company",
        "question": "What is the total consumption for customer with ID 5 in March 2013?",
        "evidence": "Consumption for a specific customer and date can be retrieved using WHERE `CustomerID` = 5 AND `Date` = '201303'",
        "SQL": "SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201303';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 126,
        "db_id": "fuel_company",
        "question": "How many transactions were made at gas station with ID 3704?",
        "evidence": "Count transactions using COUNT(*) WHERE `GasStationID` = 3704",
        "SQL": "SELECT COUNT(*) FROM transactions_1k WHERE GasStationID = 3704;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 127,
        "db_id": "fuel_company",
        "question": "What is the average price of products sold in transactions?",
        "evidence": "Average price can be calculated using AVG(`Price`)",
        "SQL": "SELECT AVG(Price) FROM transactions_1k;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 128,
        "db_id": "fuel_company",
        "question": "Which gas station in the Czech Republic has the highest number of transactions?",
        "evidence": "Join gasstations and transactions_1k, count transactions per gas station, and order by count DESC",
        "SQL": "SELECT g.GasStationID, COUNT(t.TransactionID) as transaction_count FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID WHERE g.Country = 'CZE' GROUP BY g.GasStationID ORDER BY transaction_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 129,
        "db_id": "fuel_company",
        "question": "List all products with their descriptions.",
        "evidence": "Retrieve all products using SELECT `ProductID`, `Description` FROM products",
        "SQL": "SELECT ProductID, Description FROM products;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 130,
        "db_id": "fuel_company",
        "question": "What is the total amount of product with ID 2 sold?",
        "evidence": "Sum the `Amount` for `ProductID` = 2",
        "SQL": "SELECT SUM(Amount) FROM transactions_1k WHERE ProductID = 2;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 131,
        "db_id": "fuel_company",
        "question": "Which customer segment has the highest total consumption?",
        "evidence": "Join customers and yearmonth, sum consumption per segment, and order by total DESC",
        "SQL": "SELECT c.Segment, SUM(y.Consumption) as total_consumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID GROUP BY c.Segment ORDER BY total_consumption DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 132,
        "db_id": "fuel_company",
        "question": "Find the gas station with the lowest average transaction price.",
        "evidence": "Calculate AVG(`Price`) per `GasStationID` and order by average price ASC",
        "SQL": "SELECT GasStationID, AVG(Price) as avg_price FROM transactions_1k GROUP BY GasStationID ORDER BY avg_price ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 133,
        "db_id": "fuel_company",
        "question": "How many unique customers made transactions in August 2012?",
        "evidence": "Count distinct `CustomerID` WHERE `Date` LIKE '2012-08%'",
        "SQL": "SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Date LIKE '2012-08%';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 134,
        "db_id": "fuel_company",
        "question": "What is the total price of all transactions made by customer with ID 46707?",
        "evidence": "Sum `Price` WHERE `CustomerID` = 46707",
        "SQL": "SELECT SUM(Price) FROM transactions_1k WHERE CustomerID = 46707;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 135,
        "db_id": "fuel_company",
        "question": "Which product has the highest total sales amount?",
        "evidence": "Sum `Amount` per `ProductID` and order by total amount DESC",
        "SQL": "SELECT ProductID, SUM(Amount) as total_amount FROM transactions_1k GROUP BY ProductID ORDER BY total_amount DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 136,
        "db_id": "fuel_company",
        "question": "What is the total number of transactions for each segment of gas stations?",
        "evidence": "Join gasstations and transactions_1k, count transactions per segment",
        "SQL": "SELECT g.Segment, COUNT(t.TransactionID) as transaction_count FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID GROUP BY g.Segment;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 137,
        "db_id": "fuel_company",
        "question": "Find the customer with the highest total consumption in 2013.",
        "evidence": "Sum `Consumption` per `CustomerID` WHERE `Date` LIKE '2013%' and order by total DESC",
        "SQL": "SELECT CustomerID, SUM(Consumption) as total_consumption FROM yearmonth WHERE Date LIKE '2013%' GROUP BY CustomerID ORDER BY total_consumption DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 138,
        "db_id": "fuel_company",
        "question": "What is the total price of transactions for each product?",
        "evidence": "Sum `Price` per `ProductID`",
        "SQL": "SELECT ProductID, SUM(Price) as total_price FROM transactions_1k GROUP BY ProductID;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 139,
        "db_id": "fuel_company",
        "question": "Which gas station chain has the most gas stations in the Czech Republic?",
        "evidence": "Count `GasStationID` per `ChainID` WHERE `Country` = 'CZE' and order by count DESC",
        "SQL": "SELECT ChainID, COUNT(GasStationID) as station_count FROM gasstations WHERE Country = 'CZE' GROUP BY ChainID ORDER BY station_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 140,
        "db_id": "fuel_company",
        "question": "List all transactions made by customer with ID 31543.",
        "evidence": "Retrieve all transactions using SELECT * WHERE `CustomerID` = 31543",
        "SQL": "SELECT * FROM transactions_1k WHERE CustomerID = 31543;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 141,
        "db_id": "fuel_company",
        "question": "What is the total consumption for each customer in February 2013?",
        "evidence": "Sum `Consumption` per `CustomerID` WHERE `Date` = '201302'",
        "SQL": "SELECT CustomerID, SUM(Consumption) as total_consumption FROM yearmonth WHERE Date = '201302' GROUP BY CustomerID;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 142,
        "db_id": "fuel_company",
        "question": "Which product has the lowest average price in transactions?",
        "evidence": "Calculate AVG(`Price`) per `ProductID` and order by average price ASC",
        "SQL": "SELECT ProductID, AVG(Price) as avg_price FROM transactions_1k GROUP BY ProductID ORDER BY avg_price ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 143,
        "db_id": "fuel_company",
        "question": "How many transactions were made by customers in the SME segment?",
        "evidence": "Join customers and transactions_1k, count transactions WHERE `Segment` = 'SME'",
        "SQL": "SELECT COUNT(t.TransactionID) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Segment = 'SME';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 144,
        "db_id": "fuel_company",
        "question": "What is the total amount of product 'Nafta' sold?",
        "evidence": "Join products and transactions_1k, sum `Amount` WHERE `Description` = 'Nafta'",
        "SQL": "SELECT SUM(t.Amount) FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE p.Description = 'Nafta';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 145,
        "db_id": "fuel_company",
        "question": "Find the gas station with the highest total sales in terms of price.",
        "evidence": "Sum `Price` per `GasStationID` and order by total sales DESC",
        "SQL": "SELECT GasStationID, SUM(Price) as total_sales FROM transactions_1k GROUP BY GasStationID ORDER BY total_sales DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 146,
        "db_id": "fuel_company",
        "question": "What is the total number of transactions for each customer segment?",
        "evidence": "Join customers and transactions_1k, count transactions per segment",
        "SQL": "SELECT c.Segment, COUNT(t.TransactionID) as transaction_count FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.Segment;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 147,
        "db_id": "fuel_company",
        "question": "Which gas station segment has the highest average transaction price?",
        "evidence": "Join gasstations and transactions_1k, calculate AVG(`Price`) per segment and order by average price DESC",
        "SQL": "SELECT g.Segment, AVG(t.Price) as avg_price FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID GROUP BY g.Segment ORDER BY avg_price DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 148,
        "db_id": "fuel_company",
        "question": "What is the total consumption for customer with ID 5 across all recorded months?",
        "evidence": "Sum `Consumption` WHERE `CustomerID` = 5",
        "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 5;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 149,
        "db_id": "fuel_company",
        "question": "List all transactions for product 'Special'.",
        "evidence": "Join products and transactions_1k, retrieve transactions WHERE `Description` = 'Special'",
        "SQL": "SELECT t.* FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE p.Description = 'Special';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 150,
        "db_id": "database",
        "question": "What is the UserDisplayName of the user who made the first post history entry?",
        "evidence": "UserDisplayName is in the `postHistory` table with the smallest `Id`.",
        "SQL": "SELECT UserDisplayName FROM `postHistory` WHERE Id = 1;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 151,
        "db_id": "database",
        "question": "How many badges were awarded in June 2013?",
        "evidence": "Badges awarded in June 2013 have `Date` containing '2013-06'.",
        "SQL": "SELECT COUNT(*) FROM badges WHERE strftime('%Y-%m', Date) = '2013-06';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 152,
        "db_id": "database",
        "question": "Which post has the highest score?",
        "evidence": "The highest score can be found using MAX(Score) in the `posts` table.",
        "SQL": "SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);",
        "difficulty": "simple",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 153,
        "db_id": "database",
        "question": "What is the average score of comments made by user with UserId 13?",
        "evidence": "Average score can be calculated using AVG(Score) for comments by UserId 13.",
        "SQL": "SELECT AVG(Score) FROM comments WHERE UserId = 13;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 154,
        "db_id": "database",
        "question": "List the top 3 users with the highest reputation.",
        "evidence": "Users with the highest reputation can be found using ORDER BY Reputation DESC LIMIT 3.",
        "SQL": "SELECT DisplayName, Reputation FROM users ORDER BY Reputation DESC LIMIT 3;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 155,
        "db_id": "database",
        "question": "How many posts have a view count greater than 1000?",
        "evidence": "Posts with ViewCount > 1000 can be counted using COUNT(*) with a WHERE clause.",
        "SQL": "SELECT COUNT(*) FROM posts WHERE ViewCount > 1000;",
        "difficulty": "simple",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 156,
        "db_id": "database",
        "question": "What is the total number of votes cast on post with Id 3?",
        "evidence": "Total votes can be counted using COUNT(*) for PostId 3 in the `votes` table.",
        "SQL": "SELECT COUNT(*) FROM votes WHERE PostId = 3;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 157,
        "db_id": "database",
        "question": "Which user received the 'Teacher' badge on the earliest date?",
        "evidence": "The earliest date can be found using MIN(Date) for the 'Teacher' badge.",
        "SQL": "SELECT UserId FROM badges WHERE Name = 'Teacher' ORDER BY Date ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 158,
        "db_id": "database",
        "question": "What is the most common tag used in posts?",
        "evidence": "The most common tag can be found using MAX(Count) in the `tags` table.",
        "SQL": "SELECT TagName FROM tags WHERE Count = (SELECT MAX(Count) FROM tags);",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 159,
        "db_id": "database",
        "question": "How many users have a reputation greater than 100?",
        "evidence": "Users with Reputation > 100 can be counted using COUNT(*) with a WHERE clause.",
        "SQL": "SELECT COUNT(*) FROM users WHERE Reputation > 100;",
        "difficulty": "simple",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 160,
        "db_id": "database",
        "question": "Which post has the most comments?",
        "evidence": "The post with the most comments can be found using MAX(CommentCount) in the `posts` table.",
        "SQL": "SELECT Id, Title FROM posts WHERE CommentCount = (SELECT MAX(CommentCount) FROM posts);",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 161,
        "db_id": "database",
        "question": "What is the total number of badges awarded to user with UserId 8?",
        "evidence": "Total badges can be counted using COUNT(*) for UserId 8 in the `badges` table.",
        "SQL": "SELECT COUNT(*) FROM badges WHERE UserId = 8;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 162,
        "db_id": "database",
        "question": "Which post has the highest number of views?",
        "evidence": "The highest number of views can be found using MAX(ViewCount) in the `posts` table.",
        "SQL": "SELECT Id, Title FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts);",
        "difficulty": "simple",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 163,
        "db_id": "database",
        "question": "What is the average reputation of users who have received at least one badge?",
        "evidence": "Average reputation can be calculated using AVG(Reputation) for users in the `badges` table.",
        "SQL": "SELECT AVG(Reputation) FROM users WHERE Id IN (SELECT DISTINCT UserId FROM badges);",
        "difficulty": "challenge",
        "question_type": "nested",
        "is_valid": true
    },
    {
        "question_id": 164,
        "db_id": "database",
        "question": "Which user has made the most comments?",
        "evidence": "The user with the most comments can be found using COUNT(*) GROUP BY UserId in the `comments` table.",
        "SQL": "SELECT UserId, COUNT(*) as comment_count FROM comments GROUP BY UserId ORDER BY comment_count DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 165,
        "db_id": "database",
        "question": "What is the total number of posts linked to post with Id 395?",
        "evidence": "Total linked posts can be counted using COUNT(*) for PostId 395 in the `postLinks` table.",
        "SQL": "SELECT COUNT(*) FROM postLinks WHERE PostId = 395;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 166,
        "db_id": "database",
        "question": "Which user has the highest number of upvotes?",
        "evidence": "The highest number of upvotes can be found using MAX(UpVotes) in the `users` table.",
        "SQL": "SELECT DisplayName FROM users WHERE UpVotes = (SELECT MAX(UpVotes) FROM users);",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 167,
        "db_id": "database",
        "question": "How many posts have been closed?",
        "evidence": "Closed posts have a non-null `ClosedDate` in the `posts` table.",
        "SQL": "SELECT COUNT(*) FROM posts WHERE ClosedDate IS NOT NULL;",
        "difficulty": "simple",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 168,
        "db_id": "database",
        "question": "What is the most recent post made by user with UserId 8?",
        "evidence": "The most recent post can be found using MAX(CreaionDate) for UserId 8 in the `posts` table.",
        "SQL": "SELECT Id, Title FROM posts WHERE OwnerUserId = 8 ORDER BY CreaionDate DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 169,
        "db_id": "database",
        "question": "Which tag is associated with the most posts?",
        "evidence": "The tag associated with the most posts can be found using MAX(Count) in the `tags` table.",
        "SQL": "SELECT TagName FROM tags WHERE Count = (SELECT MAX(Count) FROM tags);",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 170,
        "db_id": "database",
        "question": "How many users have never accessed the site after their creation date?",
        "evidence": "Users who never accessed the site again have LastAccessDate equal to CreationDate.",
        "SQL": "SELECT COUNT(*) FROM users WHERE LastAccessDate = CreationDate;",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 171,
        "db_id": "database",
        "question": "What is the total number of distinct tags used in posts?",
        "evidence": "Distinct tags can be counted using COUNT(DISTINCT TagName) in the `tags` table.",
        "SQL": "SELECT COUNT(DISTINCT TagName) FROM tags;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 172,
        "db_id": "database",
        "question": "Which user has the most downvotes?",
        "evidence": "The user with the most downvotes can be found using MAX(DownVotes) in the `users` table.",
        "SQL": "SELECT DisplayName FROM users WHERE DownVotes = (SELECT MAX(DownVotes) FROM users);",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 173,
        "db_id": "database",
        "question": "What is the average number of views per post?",
        "evidence": "Average views per post can be calculated using AVG(ViewCount) in the `posts` table.",
        "SQL": "SELECT AVG(ViewCount) FROM posts;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 174,
        "db_id": "database",
        "question": "Which user has the most badges?",
        "evidence": "The user with the most badges can be found using COUNT(*) GROUP BY UserId in the `badges` table.",
        "SQL": "SELECT UserId, COUNT(*) as badge_count FROM badges GROUP BY UserId ORDER BY badge_count DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 175,
        "db_id": "chemistry_db",
        "question": "What is the element of atom with atom_id 'TR000_1'?",
        "evidence": "Element is stored in `atom` table with `atom_id` as primary key.",
        "SQL": "SELECT element FROM `atom` WHERE atom_id = 'TR000_1';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 176,
        "db_id": "chemistry_db",
        "question": "How many atoms are there in the molecule with molecule_id 'TR000'?",
        "evidence": "Count atoms by `molecule_id` in `atom` table.",
        "SQL": "SELECT COUNT(*) FROM `atom` WHERE molecule_id = 'TR000';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 177,
        "db_id": "chemistry_db",
        "question": "Which molecule has the label '-'?",
        "evidence": "Label is stored in `molecule` table.",
        "SQL": "SELECT molecule_id FROM `molecule` WHERE label = '-';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 178,
        "db_id": "chemistry_db",
        "question": "What is the bond type of bond with bond_id 'TR000_1_2'?",
        "evidence": "Bond type is stored in `bond` table with `bond_id` as primary key.",
        "SQL": "SELECT bond_type FROM `bond` WHERE bond_id = 'TR000_1_2';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 179,
        "db_id": "chemistry_db",
        "question": "How many bonds are associated with the molecule 'TR000'?",
        "evidence": "Count bonds by `molecule_id` in `bond` table.",
        "SQL": "SELECT COUNT(*) FROM `bond` WHERE molecule_id = 'TR000';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 180,
        "db_id": "chemistry_db",
        "question": "Which atom is connected to atom 'TR000_2'?",
        "evidence": "Connected atoms are stored in `connected` table.",
        "SQL": "SELECT atom_id2 FROM `connected` WHERE atom_id = 'TR000_2';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 181,
        "db_id": "chemistry_db",
        "question": "What are the molecule_ids of molecules with a positive label?",
        "evidence": "Label is stored in `molecule` table.",
        "SQL": "SELECT molecule_id FROM `molecule` WHERE label = '+';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 182,
        "db_id": "chemistry_db",
        "question": "List all elements in molecule 'TR000'.",
        "evidence": "Elements are stored in `atom` table with `molecule_id` as foreign key.",
        "SQL": "SELECT element FROM `atom` WHERE molecule_id = 'TR000';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 183,
        "db_id": "chemistry_db",
        "question": "What is the most common element in molecule 'TR000'?",
        "evidence": "Count elements in `atom` table and find the most frequent.",
        "SQL": "SELECT element FROM `atom` WHERE molecule_id = 'TR000' GROUP BY element ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 184,
        "db_id": "chemistry_db",
        "question": "Which bond connects atom 'TR000_1' and atom 'TR000_2'?",
        "evidence": "Connected atoms and bonds are stored in `connected` table.",
        "SQL": "SELECT bond_id FROM `connected` WHERE atom_id = 'TR000_1' AND atom_id2 = 'TR000_2';",
        "difficulty": "moderate",
        "question_type": "reasoning",
        "is_valid": true
    },
    {
        "question_id": 185,
        "db_id": "chemistry_db",
        "question": "What is the label of the molecule with the most atoms?",
        "evidence": "Count atoms per molecule and join with `molecule` table.",
        "SQL": "SELECT m.label FROM `molecule` m JOIN (SELECT molecule_id, COUNT(*) as atom_count FROM `atom` GROUP BY molecule_id ORDER BY atom_count DESC LIMIT 1) a ON m.molecule_id = a.molecule_id;",
        "difficulty": "challenge",
        "question_type": "nested",
        "is_valid": true
    },
    {
        "question_id": 186,
        "db_id": "chemistry_db",
        "question": "How many unique elements are there in molecule 'TR000'?",
        "evidence": "Distinct elements in `atom` table for a given `molecule_id`.",
        "SQL": "SELECT COUNT(DISTINCT element) FROM `atom` WHERE molecule_id = 'TR000';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 187,
        "db_id": "chemistry_db",
        "question": "Which molecule has the highest number of bonds?",
        "evidence": "Count bonds per molecule in `bond` table.",
        "SQL": "SELECT molecule_id FROM `bond` GROUP BY molecule_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 188,
        "db_id": "chemistry_db",
        "question": "What is the bond type between atom 'TR000_2' and atom 'TR000_3'?",
        "evidence": "Bond type is stored in `bond` table, linked via `connected` table.",
        "SQL": "SELECT b.bond_type FROM `bond` b JOIN `connected` c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR000_2' AND c.atom_id2 = 'TR000_3';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 189,
        "db_id": "chemistry_db",
        "question": "Find the molecule with the least number of atoms.",
        "evidence": "Count atoms per molecule and order by count.",
        "SQL": "SELECT molecule_id FROM `atom` GROUP BY molecule_id ORDER BY COUNT(*) ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 190,
        "db_id": "chemistry_db",
        "question": "What is the total number of bonds in the database?",
        "evidence": "Count all entries in `bond` table.",
        "SQL": "SELECT COUNT(*) FROM `bond`;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 191,
        "db_id": "chemistry_db",
        "question": "Which atoms are directly connected to atom 'TR000_2'?",
        "evidence": "Connected atoms are stored in `connected` table.",
        "SQL": "SELECT atom_id2 FROM `connected` WHERE atom_id = 'TR000_2';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 192,
        "db_id": "chemistry_db",
        "question": "What is the label of the molecule with molecule_id 'TR002'?",
        "evidence": "Label is stored in `molecule` table.",
        "SQL": "SELECT label FROM `molecule` WHERE molecule_id = 'TR002';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 193,
        "db_id": "chemistry_db",
        "question": "How many molecules have a positive label?",
        "evidence": "Count molecules with label '+' in `molecule` table.",
        "SQL": "SELECT COUNT(*) FROM `molecule` WHERE label = '+';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 194,
        "db_id": "chemistry_db",
        "question": "Which molecule has the most unique elements?",
        "evidence": "Count distinct elements per molecule in `atom` table.",
        "SQL": "SELECT molecule_id FROM `atom` GROUP BY molecule_id ORDER BY COUNT(DISTINCT element) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 195,
        "db_id": "chemistry_db",
        "question": "What is the bond type of the bond connecting atom 'TR000_1' and atom 'TR000_2'?",
        "evidence": "Bond type is stored in `bond` table, linked via `connected` table.",
        "SQL": "SELECT b.bond_type FROM `bond` b JOIN `connected` c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 196,
        "db_id": "chemistry_db",
        "question": "List all bonds in molecule 'TR000'.",
        "evidence": "Bonds are stored in `bond` table with `molecule_id` as foreign key.",
        "SQL": "SELECT bond_id FROM `bond` WHERE molecule_id = 'TR000';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 197,
        "db_id": "chemistry_db",
        "question": "What is the element of the atom connected to atom 'TR000_3'?",
        "evidence": "Connected atoms are stored in `connected` table, elements in `atom` table.",
        "SQL": "SELECT a.element FROM `atom` a JOIN `connected` c ON a.atom_id = c.atom_id WHERE c.atom_id2 = 'TR000_3';",
        "difficulty": "challenge",
        "question_type": "reasoning",
        "is_valid": true
    },
    {
        "question_id": 198,
        "db_id": "chemistry_db",
        "question": "How many bonds are there in molecule 'TR001'?",
        "evidence": "Count bonds by `molecule_id` in `bond` table.",
        "SQL": "SELECT COUNT(*) FROM `bond` WHERE molecule_id = 'TR001';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 199,
        "db_id": "chemistry_db",
        "question": "Which molecule has the least number of unique elements?",
        "evidence": "Count distinct elements per molecule in `atom` table.",
        "SQL": "SELECT molecule_id FROM `atom` GROUP BY molecule_id ORDER BY COUNT(DISTINCT element) ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 200,
        "db_id": "medical_db",
        "question": "What is the aCL IgG level for the examination conducted on 1997-05-27?",
        "evidence": "Direct retrieval of aCL IgG value for a specific examination date.",
        "SQL": "SELECT `aCL IgG` FROM `Examination` WHERE `Examination Date` = '1997-05-27';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 201,
        "db_id": "medical_db",
        "question": "How many examinations were conducted after January 1, 1997?",
        "evidence": "Examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'.",
        "SQL": "SELECT COUNT(*) FROM `Examination` WHERE `Examination Date` > '1997-01-01';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 202,
        "db_id": "medical_db",
        "question": "Which patient has the highest aCL IgM level?",
        "evidence": "Using ORDER BY to find the maximum aCL IgM level.",
        "SQL": "SELECT `ID`, `aCL IgM` FROM `Examination` ORDER BY `aCL IgM` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 203,
        "db_id": "medical_db",
        "question": "What is the average LDH level recorded in the laboratory?",
        "evidence": "Using AVG function to calculate the average LDH level.",
        "SQL": "SELECT AVG(`LDH`) FROM `Laboratory`;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 204,
        "db_id": "medical_db",
        "question": "List all patients diagnosed with SLE.",
        "evidence": "Filtering patients based on the diagnosis of SLE.",
        "SQL": "SELECT `ID` FROM `Patient` WHERE `Diagnosis` = 'SLE';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 205,
        "db_id": "medical_db",
        "question": "What is the total number of patients with thrombosis?",
        "evidence": "Counting patients with thrombosis where Thrombosis = 1.",
        "SQL": "SELECT COUNT(DISTINCT `ID`) FROM `Examination` WHERE `Thrombosis` = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 206,
        "db_id": "medical_db",
        "question": "Which examination has the lowest aCL IgA level?",
        "evidence": "Using ORDER BY to find the minimum aCL IgA level.",
        "SQL": "SELECT `ID`, `Examination Date`, `aCL IgA` FROM `Examination` ORDER BY `aCL IgA` ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 207,
        "db_id": "medical_db",
        "question": "What is the most common ANA pattern observed?",
        "evidence": "Using GROUP BY and COUNT to find the most frequent ANA pattern.",
        "SQL": "SELECT `ANA Pattern`, COUNT(*) as frequency FROM `Examination` GROUP BY `ANA Pattern` ORDER BY frequency DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 208,
        "db_id": "medical_db",
        "question": "Find the patient ID and examination date for examinations with normal activated partial prothrombin time.",
        "evidence": "Normal activated partial prothrombin time refers to APTT < 45.",
        "SQL": "SELECT `ID`, `Date` FROM `Laboratory` WHERE `APTT` < 45;",
        "difficulty": "moderate",
        "question_type": "comparison",
        "is_valid": true
    },
    {
        "question_id": 209,
        "db_id": "medical_db",
        "question": "Which patient has the earliest recorded examination?",
        "evidence": "Using ORDER BY to find the earliest examination date.",
        "SQL": "SELECT `ID`, `Examination Date` FROM `Examination` ORDER BY `Examination Date` ASC LIMIT 1;",
        "difficulty": "simple",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 210,
        "db_id": "medical_db",
        "question": "List all unique diagnoses recorded in the examination table.",
        "evidence": "Using DISTINCT to find unique diagnoses.",
        "SQL": "SELECT DISTINCT `Diagnosis` FROM `Examination`;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 211,
        "db_id": "medical_db",
        "question": "How many patients have been admitted with a diagnosis of RA susp.?",
        "evidence": "Filtering patients based on admission and diagnosis.",
        "SQL": "SELECT COUNT(*) FROM `Patient` WHERE `Admission` = '+' AND `Diagnosis` = 'RA susp.';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 212,
        "db_id": "medical_db",
        "question": "What is the maximum T-BIL level recorded in the laboratory?",
        "evidence": "Using MAX function to find the highest T-BIL level.",
        "SQL": "SELECT MAX(`T-BIL`) FROM `Laboratory`;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 213,
        "db_id": "medical_db",
        "question": "Which patient has the highest platelet count (PLT) recorded?",
        "evidence": "Using ORDER BY to find the maximum PLT value.",
        "SQL": "SELECT `ID`, `PLT` FROM `Laboratory` ORDER BY `PLT` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 214,
        "db_id": "medical_db",
        "question": "Find the average aCL IgG level for patients with thrombosis.",
        "evidence": "Calculating average aCL IgG for patients with Thrombosis = 1.",
        "SQL": "SELECT AVG(`aCL IgG`) FROM `Examination` WHERE `Thrombosis` = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 215,
        "db_id": "medical_db",
        "question": "List the IDs of patients who have both SLE and PSS diagnoses.",
        "evidence": "Using JOIN to find patients with both diagnoses.",
        "SQL": "SELECT DISTINCT e1.`ID` FROM `Examination` e1 JOIN `Examination` e2 ON e1.`ID` = e2.`ID` WHERE e1.`Diagnosis` = 'SLE' AND e2.`Diagnosis` = 'PSS';",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 216,
        "db_id": "medical_db",
        "question": "What is the most recent examination date for patient ID 27654?",
        "evidence": "Using ORDER BY to find the latest examination date for a specific patient.",
        "SQL": "SELECT `Examination Date` FROM `Examination` WHERE `ID` = 27654 ORDER BY `Examination Date` DESC LIMIT 1;",
        "difficulty": "simple",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 217,
        "db_id": "medical_db",
        "question": "How many patients have a normal APTT and are diagnosed with SLE?",
        "evidence": "Combining conditions for APTT and diagnosis.",
        "SQL": "SELECT COUNT(DISTINCT l.`ID`) FROM `Laboratory` l JOIN `Examination` e ON l.`ID` = e.`ID` WHERE l.`APTT` < 45 AND e.`Diagnosis` = 'SLE';",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 218,
        "db_id": "medical_db",
        "question": "What is the average GOT level for all laboratory records?",
        "evidence": "Using AVG function to calculate the average GOT level.",
        "SQL": "SELECT AVG(`GOT`) FROM `Laboratory`;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 219,
        "db_id": "medical_db",
        "question": "Which patient has the earliest birthday?",
        "evidence": "Using ORDER BY to find the earliest birthday.",
        "SQL": "SELECT `ID`, `Birthday` FROM `Patient` ORDER BY `Birthday` ASC LIMIT 1;",
        "difficulty": "simple",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 220,
        "db_id": "medical_db",
        "question": "Find the patient ID with the highest average aCL IgG level across all examinations.",
        "evidence": "Using GROUP BY and AVG to find the highest average aCL IgG level.",
        "SQL": "SELECT `ID`, AVG(`aCL IgG`) as avg_aCL_IgG FROM `Examination` GROUP BY `ID` ORDER BY avg_aCL_IgG DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 221,
        "db_id": "medical_db",
        "question": "List all examination dates for patient ID 102490.",
        "evidence": "Direct retrieval of examination dates for a specific patient ID.",
        "SQL": "SELECT `Examination Date` FROM `Examination` WHERE `ID` = 102490;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 222,
        "db_id": "medical_db",
        "question": "What is the total number of unique patients recorded in the laboratory?",
        "evidence": "Using COUNT DISTINCT to find the number of unique patient IDs.",
        "SQL": "SELECT COUNT(DISTINCT `ID`) FROM `Laboratory`;",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 223,
        "db_id": "medical_db",
        "question": "Which patient has the highest number of examinations recorded?",
        "evidence": "Using GROUP BY and COUNT to find the patient with the most examinations.",
        "SQL": "SELECT `ID`, COUNT(*) as exam_count FROM `Examination` GROUP BY `ID` ORDER BY exam_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 224,
        "db_id": "student_club",
        "question": "What is the email address of the member named Luisa Guidi?",
        "evidence": "Retrieve email from `member` where first_name = 'Luisa' and last_name = 'Guidi'",
        "SQL": "SELECT email FROM member WHERE first_name = 'Luisa' AND last_name = 'Guidi';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 225,
        "db_id": "student_club",
        "question": "How many events are currently open?",
        "evidence": "Count events where status = 'Open'",
        "SQL": "SELECT COUNT(*) FROM event WHERE status = 'Open';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 226,
        "db_id": "student_club",
        "question": "What is the total amount spent on food?",
        "evidence": "Sum spent from `budget` where category = 'Food'",
        "SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 227,
        "db_id": "student_club",
        "question": "Which event had the highest budget amount?",
        "evidence": "Order by amount in `budget` and limit to 1",
        "SQL": "SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event ORDER BY amount DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 228,
        "db_id": "student_club",
        "question": "List all members who attended the event with ID 'rec2N69DMcrqN9PJC'.",
        "evidence": "Join `attendance` and `member` on link_to_member",
        "SQL": "SELECT first_name, last_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event = 'rec2N69DMcrqN9PJC';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 229,
        "db_id": "student_club",
        "question": "What is the average cost of approved expenses?",
        "evidence": "Average cost from `expense` where approved = 'true'",
        "SQL": "SELECT AVG(cost) FROM expense WHERE approved = 'true';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 230,
        "db_id": "student_club",
        "question": "Which member has the largest number of approved expenses?",
        "evidence": "Count expenses grouped by link_to_member where approved = 'true'",
        "SQL": "SELECT first_name, last_name, COUNT(*) as expense_count FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE approved = 'true' GROUP BY member.member_id ORDER BY expense_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 231,
        "db_id": "student_club",
        "question": "What is the total remaining budget for all closed events?",
        "evidence": "Sum remaining from `budget` where event_status = 'Closed'",
        "SQL": "SELECT SUM(remaining) FROM budget WHERE event_status = 'Closed';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 232,
        "db_id": "student_club",
        "question": "Find the names of all events that took place in 'MU 215'.",
        "evidence": "Select event_name from `event` where location = 'MU 215'",
        "SQL": "SELECT event_name FROM event WHERE location = 'MU 215';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 233,
        "db_id": "student_club",
        "question": "Which major has the most members?",
        "evidence": "Count members grouped by link_to_major",
        "SQL": "SELECT major_name, COUNT(*) as member_count FROM major JOIN member ON major.major_id = member.link_to_major GROUP BY major.major_id ORDER BY member_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 234,
        "db_id": "student_club",
        "question": "What is the total income received from dues?",
        "evidence": "Sum amount from `income` where source = 'Dues'",
        "SQL": "SELECT SUM(amount) FROM income WHERE source = 'Dues';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 235,
        "db_id": "student_club",
        "question": "List all expenses made by the member with email 'angela.sanders@lpu.edu'.",
        "evidence": "Join `expense` and `member` on link_to_member and filter by email",
        "SQL": "SELECT expense_description, cost FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE email = 'angela.sanders@lpu.edu';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 236,
        "db_id": "student_club",
        "question": "What is the most expensive approved expense?",
        "evidence": "Order by cost in `expense` where approved = 'true' and limit to 1",
        "SQL": "SELECT expense_description, cost FROM expense WHERE approved = 'true' ORDER BY cost DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 237,
        "db_id": "student_club",
        "question": "How many members are from the 'College of Agriculture and Applied Sciences'?",
        "evidence": "Join `member` and `major` on link_to_major and filter by college",
        "SQL": "SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE college = 'College of Agriculture and Applied Sciences';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 238,
        "db_id": "student_club",
        "question": "What is the total number of unique events attended by members?",
        "evidence": "Count distinct link_to_event from `attendance`",
        "SQL": "SELECT COUNT(DISTINCT link_to_event) FROM attendance;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 239,
        "db_id": "student_club",
        "question": "Which event had the most members in attendance?",
        "evidence": "Count members grouped by link_to_event in `attendance`",
        "SQL": "SELECT event_name, COUNT(*) as attendance_count FROM event JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_id ORDER BY attendance_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 240,
        "db_id": "student_club",
        "question": "Find the total cost of expenses linked to the budget with ID 'rec1bG6HSft7XIvTP'.",
        "evidence": "Sum cost from `expense` where link_to_budget = 'rec1bG6HSft7XIvTP'",
        "SQL": "SELECT SUM(cost) FROM expense WHERE link_to_budget = 'rec1bG6HSft7XIvTP';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 241,
        "db_id": "student_club",
        "question": "What is the name of the event that took place on '2020-03-10'?",
        "evidence": "Select event_name from `event` where event_date = '2020-03-10'",
        "SQL": "SELECT event_name FROM event WHERE event_date = '2020-03-10';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 242,
        "db_id": "student_club",
        "question": "Which member has the smallest t-shirt size?",
        "evidence": "Order by t_shirt_size in `member` and limit to 1",
        "SQL": "SELECT first_name, last_name, t_shirt_size FROM member ORDER BY t_shirt_size ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 243,
        "db_id": "student_club",
        "question": "List all events that have a budget category of 'Advertisement'.",
        "evidence": "Join `event` and `budget` on link_to_event and filter by category",
        "SQL": "SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE category = 'Advertisement';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 244,
        "db_id": "student_club",
        "question": "What is the total number of members who have made an income entry?",
        "evidence": "Count distinct link_to_member from `income`",
        "SQL": "SELECT COUNT(DISTINCT link_to_member) FROM income;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 245,
        "db_id": "student_club",
        "question": "Which city has the most members?",
        "evidence": "Join `member` and `zip_code` on zip and group by city",
        "SQL": "SELECT city, COUNT(*) as member_count FROM member JOIN zip_code ON member.zip = zip_code.zip_code GROUP BY city ORDER BY member_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 246,
        "db_id": "student_club",
        "question": "Find the total amount of expenses approved by the member with ID 'recD078PnS3x2doBe'.",
        "evidence": "Sum cost from `expense` where link_to_member = 'recD078PnS3x2doBe' and approved = 'true'",
        "SQL": "SELECT SUM(cost) FROM expense WHERE link_to_member = 'recD078PnS3x2doBe' AND approved = 'true';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 247,
        "db_id": "student_club",
        "question": "What is the name of the member who received income on '2019-10-17'?",
        "evidence": "Join `income` and `member` on link_to_member and filter by date_received",
        "SQL": "SELECT first_name, last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE date_received = '2019-10-17';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 248,
        "db_id": "student_club",
        "question": "Which event has the most remaining budget?",
        "evidence": "Order by remaining in `budget` and limit to 1",
        "SQL": "SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event ORDER BY remaining DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 249,
        "db_id": "financial_db",
        "question": "What is the total amount of orders with the k_symbol 'SIPO'?",
        "evidence": "SUM(amount) WHERE k_symbol = 'SIPO'",
        "SQL": "SELECT SUM(amount) FROM `order` WHERE k_symbol = 'SIPO';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 250,
        "db_id": "financial_db",
        "question": "How many accounts are there in district 1?",
        "evidence": "COUNT(account_id) WHERE district_id = 1",
        "SQL": "SELECT COUNT(account_id) FROM account WHERE district_id = 1;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 251,
        "db_id": "financial_db",
        "question": "What is the average loan amount for loans with status 'A'?",
        "evidence": "AVG(amount) WHERE status = 'A'",
        "SQL": "SELECT AVG(amount) FROM loan WHERE status = 'A';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 252,
        "db_id": "financial_db",
        "question": "Which district has the highest average salary?",
        "evidence": "ORDER BY A10 DESC LIMIT 1",
        "SQL": "SELECT A2 FROM district ORDER BY A10 DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 253,
        "db_id": "financial_db",
        "question": "List all transactions made in January 1996.",
        "evidence": "date LIKE '1996-01%'",
        "SQL": "SELECT * FROM trans WHERE date LIKE '1996-01%';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 254,
        "db_id": "financial_db",
        "question": "What is the total balance of all accounts?",
        "evidence": "SUM(balance) from trans",
        "SQL": "SELECT SUM(balance) FROM trans;",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 255,
        "db_id": "financial_db",
        "question": "Which client has the earliest birth date?",
        "evidence": "ORDER BY birth_date ASC LIMIT 1",
        "SQL": "SELECT client_id, birth_date FROM client ORDER BY birth_date ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 256,
        "db_id": "financial_db",
        "question": "How many gold cards have been issued?",
        "evidence": "COUNT(card_id) WHERE type = 'gold'",
        "SQL": "SELECT COUNT(card_id) FROM card WHERE type = 'gold';",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 257,
        "db_id": "financial_db",
        "question": "What is the total amount of non-credit card withdrawals?",
        "evidence": "SUM(amount) WHERE type = 'VYDAJ'",
        "SQL": "SELECT SUM(amount) FROM trans WHERE type = 'VYDAJ';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 258,
        "db_id": "financial_db",
        "question": "Which account has the highest number of transactions?",
        "evidence": "GROUP BY account_id ORDER BY COUNT(trans_id) DESC LIMIT 1",
        "SQL": "SELECT account_id, COUNT(trans_id) as transaction_count FROM trans GROUP BY account_id ORDER BY transaction_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 259,
        "db_id": "financial_db",
        "question": "Find the district with the most clients.",
        "evidence": "GROUP BY district_id ORDER BY COUNT(client_id) DESC LIMIT 1",
        "SQL": "SELECT district_id, COUNT(client_id) as client_count FROM client GROUP BY district_id ORDER BY client_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 260,
        "db_id": "financial_db",
        "question": "What is the total amount of loans for accounts in district 1?",
        "evidence": "JOIN account ON loan.account_id = account.account_id WHERE district_id = 1",
        "SQL": "SELECT SUM(loan.amount) FROM loan JOIN account ON loan.account_id = account.account_id WHERE account.district_id = 1;",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 261,
        "db_id": "financial_db",
        "question": "List all clients who have both a loan and a card.",
        "evidence": "JOIN disp ON loan.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id",
        "SQL": "SELECT DISTINCT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN loan ON disp.account_id = loan.account_id JOIN card ON disp.disp_id = card.disp_id;",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 262,
        "db_id": "financial_db",
        "question": "What is the average balance of accounts with loans?",
        "evidence": "JOIN loan ON trans.account_id = loan.account_id",
        "SQL": "SELECT AVG(trans.balance) FROM trans JOIN loan ON trans.account_id = loan.account_id;",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 263,
        "db_id": "financial_db",
        "question": "Which district has the highest number of orders?",
        "evidence": "JOIN account ON `order`.account_id = account.account_id GROUP BY district_id ORDER BY COUNT(order_id) DESC LIMIT 1",
        "SQL": "SELECT district_id, COUNT(order_id) as order_count FROM `order` JOIN account ON `order`.account_id = account.account_id GROUP BY district_id ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 264,
        "db_id": "financial_db",
        "question": "Find the client with the highest total loan amount.",
        "evidence": "JOIN disp ON loan.account_id = disp.account_id GROUP BY client_id ORDER BY SUM(amount) DESC LIMIT 1",
        "SQL": "SELECT disp.client_id, SUM(loan.amount) as total_loan FROM loan JOIN disp ON loan.account_id = disp.account_id GROUP BY disp.client_id ORDER BY total_loan DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 265,
        "db_id": "financial_db",
        "question": "What is the total number of transactions for accounts with a gold card?",
        "evidence": "JOIN disp ON card.disp_id = disp.disp_id JOIN trans ON disp.account_id = trans.account_id WHERE card.type = 'gold'",
        "SQL": "SELECT COUNT(trans.trans_id) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN trans ON disp.account_id = trans.account_id WHERE card.type = 'gold';",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 266,
        "db_id": "financial_db",
        "question": "What is the average amount of orders sent to bank 'YZ'?",
        "evidence": "AVG(amount) WHERE bank_to = 'YZ'",
        "SQL": "SELECT AVG(amount) FROM `order` WHERE bank_to = 'YZ';",
        "difficulty": "moderate",
        "question_type": "aggregation",
        "is_valid": true
    },
    {
        "question_id": 267,
        "db_id": "financial_db",
        "question": "How many clients are there in the district with the name 'Prague'?",
        "evidence": "JOIN district ON client.district_id = district.district_id WHERE A3 = 'Prague'",
        "SQL": "SELECT COUNT(client.client_id) FROM client JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'Prague';",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 268,
        "db_id": "financial_db",
        "question": "Which account has the highest balance in January 1996?",
        "evidence": "WHERE date LIKE '1996-01%' ORDER BY balance DESC LIMIT 1",
        "SQL": "SELECT account_id, balance FROM trans WHERE date LIKE '1996-01%' ORDER BY balance DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 269,
        "db_id": "financial_db",
        "question": "What is the total number of loans with a duration of 12 months?",
        "evidence": "COUNT(loan_id) WHERE duration = 12",
        "SQL": "SELECT COUNT(loan_id) FROM loan WHERE duration = 12;",
        "difficulty": "simple",
        "question_type": "exact",
        "is_valid": true
    },
    {
        "question_id": 270,
        "db_id": "financial_db",
        "question": "Find the client with the most recent card issuance.",
        "evidence": "ORDER BY issued DESC LIMIT 1",
        "SQL": "SELECT client_id FROM card JOIN disp ON card.disp_id = disp.disp_id ORDER BY issued DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking",
        "is_valid": true
    },
    {
        "question_id": 271,
        "db_id": "financial_db",
        "question": "What is the total amount of transactions for accounts in district 5?",
        "evidence": "JOIN account ON trans.account_id = account.account_id WHERE district_id = 5",
        "SQL": "SELECT SUM(trans.amount) FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;",
        "difficulty": "moderate",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 272,
        "db_id": "financial_db",
        "question": "Which client has the highest number of accounts?",
        "evidence": "JOIN disp ON client.client_id = disp.client_id GROUP BY client_id ORDER BY COUNT(account_id) DESC LIMIT 1",
        "SQL": "SELECT client.client_id, COUNT(disp.account_id) as account_count FROM client JOIN disp ON client.client_id = disp.client_id GROUP BY client.client_id ORDER BY account_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table",
        "is_valid": true
    },
    {
        "question_id": 273,
        "db_id": "financial_db",
        "question": "What is the total amount of payments for loans with status 'B'?",
        "evidence": "SUM(payments) WHERE status = 'B'",
        "SQL": "SELECT SUM(payments) FROM loan WHERE status = 'B';",
        "difficulty": "simple",
        "question_type": "aggregation",
        "is_valid": true
    }
]