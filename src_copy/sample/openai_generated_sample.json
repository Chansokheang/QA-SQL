[
    {
        "question_id": 0,
        "db_id": "formula_1",
        "question": "What is the total number of races held in 2009?",
        "evidence": "Count the number of races where year = 2009",
        "SQL": "SELECT COUNT(*) FROM `races` WHERE year = 2009;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 1,
        "db_id": "formula_1",
        "question": "Which constructor scored the highest points in race 18?",
        "evidence": "Find the constructor with the maximum points in `constructorResults` for raceId = 18",
        "SQL": "SELECT c.name FROM `constructorResults` cr JOIN `constructors` c ON cr.constructorId = c.constructorId WHERE cr.raceId = 18 ORDER BY cr.points DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 2,
        "db_id": "formula_1",
        "question": "How many pit stops did Lewis Hamilton make in race 841?",
        "evidence": "Count the number of pit stops for driverId corresponding to Lewis Hamilton in raceId = 841",
        "SQL": "SELECT COUNT(*) FROM `pitStops` ps JOIN `drivers` d ON ps.driverId = d.driverId WHERE ps.raceId = 841 AND d.forename = 'Lewis' AND d.surname = 'Hamilton';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 3,
        "db_id": "formula_1",
        "question": "What is the average lap time in milliseconds for driver 1 in race 1?",
        "evidence": "Calculate the average of milliseconds for driverId = 1 and raceId = 1 in `lapTimes`",
        "SQL": "SELECT AVG(milliseconds) FROM `lapTimes` WHERE raceId = 1 AND driverId = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 4,
        "db_id": "formula_1",
        "question": "Which driver had the fastest lap time in race 18?",
        "evidence": "Find the driver with the minimum fastestLapTime in `results` for raceId = 18",
        "SQL": "SELECT d.forename, d.surname FROM `results` r JOIN `drivers` d ON r.driverId = d.driverId WHERE r.raceId = 18 ORDER BY r.fastestLapTime ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 5,
        "db_id": "formula_1",
        "question": "What is the nationality of the constructor with the most wins in race 18?",
        "evidence": "Find the constructor with the maximum wins in `constructorStandings` for raceId = 18",
        "SQL": "SELECT c.nationality FROM `constructorStandings` cs JOIN `constructors` c ON cs.constructorId = c.constructorId WHERE cs.raceId = 18 ORDER BY cs.wins DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "reasoning"
    },
    {
        "question_id": 6,
        "db_id": "formula_1",
        "question": "List all circuits located in Spain.",
        "evidence": "Select circuits where country = 'Spain'",
        "SQL": "SELECT name FROM `circuits` WHERE country = 'Spain';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 7,
        "db_id": "formula_1",
        "question": "Which driver had the most points in the 2009 season?",
        "evidence": "Sum points for each driver in `driverStandings` for races in 2009",
        "SQL": "SELECT d.forename, d.surname, SUM(ds.points) as total_points FROM `driverStandings` ds JOIN `drivers` d ON ds.driverId = d.driverId JOIN `races` r ON ds.raceId = r.raceId WHERE r.year = 2009 GROUP BY ds.driverId ORDER BY total_points DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 8,
        "db_id": "formula_1",
        "question": "What is the position of McLaren in the constructor standings for race 18?",
        "evidence": "Find the position of McLaren in `constructorStandings` for raceId = 18",
        "SQL": "SELECT cs.position FROM `constructorStandings` cs JOIN `constructors` c ON cs.constructorId = c.constructorId WHERE cs.raceId = 18 AND c.name = 'McLaren';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 9,
        "db_id": "formula_1",
        "question": "How many races did Nico Rosberg participate in during 2009?",
        "evidence": "Count distinct raceId for driverId corresponding to Nico Rosberg in `results` for races in 2009",
        "SQL": "SELECT COUNT(DISTINCT r.raceId) FROM `results` res JOIN `drivers` d ON res.driverId = d.driverId JOIN `races` r ON res.raceId = r.raceId WHERE d.forename = 'Nico' AND d.surname = 'Rosberg' AND r.year = 2009;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 10,
        "db_id": "formula_1",
        "question": "What is the total number of wins for the driver with the code 'HAM'?",
        "evidence": "Sum wins for driverId corresponding to code 'HAM' in `driverStandings`",
        "SQL": "SELECT SUM(wins) FROM `driverStandings` ds JOIN `drivers` d ON ds.driverId = d.driverId WHERE d.code = 'HAM';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 11,
        "db_id": "formula_1",
        "question": "Which constructor had the most points in the 2009 Australian Grand Prix?",
        "evidence": "Find the constructor with the maximum points in `constructorResults` for raceId corresponding to the 2009 Australian Grand Prix",
        "SQL": "SELECT c.name FROM `constructorResults` cr JOIN `constructors` c ON cr.constructorId = c.constructorId JOIN `races` r ON cr.raceId = r.raceId WHERE r.name = 'Australian Grand Prix' AND r.year = 2009 ORDER BY cr.points DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 12,
        "db_id": "formula_1",
        "question": "What is the average position of BMW Sauber in the constructor standings for all races?",
        "evidence": "Calculate the average position for BMW Sauber in `constructorStandings`",
        "SQL": "SELECT AVG(cs.position) FROM `constructorStandings` cs JOIN `constructors` c ON cs.constructorId = c.constructorId WHERE c.name = 'BMW Sauber';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 13,
        "db_id": "formula_1",
        "question": "Which driver had the highest grid position in the 2009 Chinese Grand Prix?",
        "evidence": "Find the driver with the minimum grid position in `results` for raceId corresponding to the 2009 Chinese Grand Prix",
        "SQL": "SELECT d.forename, d.surname FROM `results` res JOIN `drivers` d ON res.driverId = d.driverId JOIN `races` r ON res.raceId = r.raceId WHERE r.name = 'Chinese Grand Prix' AND r.year = 2009 ORDER BY res.grid ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 14,
        "db_id": "formula_1",
        "question": "What is the total number of laps completed by Lewis Hamilton in race 18?",
        "evidence": "Sum laps for driverId corresponding to Lewis Hamilton in `results` for raceId = 18",
        "SQL": "SELECT SUM(laps) FROM `results` res JOIN `drivers` d ON res.driverId = d.driverId WHERE res.raceId = 18 AND d.forename = 'Lewis' AND d.surname = 'Hamilton';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 15,
        "db_id": "formula_1",
        "question": "Which circuit has the highest altitude?",
        "evidence": "Find the circuit with the maximum alt in `circuits`",
        "SQL": "SELECT name FROM `circuits` WHERE alt = (SELECT MAX(alt) FROM `circuits`);",
        "difficulty": "simple",
        "question_type": "ranking"
    },
    {
        "question_id": 16,
        "db_id": "formula_1",
        "question": "What is the total number of constructors that participated in the 2009 season?",
        "evidence": "Count distinct constructorId in `constructorResults` for races in 2009",
        "SQL": "SELECT COUNT(DISTINCT cr.constructorId) FROM `constructorResults` cr JOIN `races` r ON cr.raceId = r.raceId WHERE r.year = 2009;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 17,
        "db_id": "formula_1",
        "question": "Which driver had the most pit stops in race 841?",
        "evidence": "Count pit stops for each driver in `pitStops` for raceId = 841",
        "SQL": "SELECT d.forename, d.surname, COUNT(*) as stop_count FROM `pitStops` ps JOIN `drivers` d ON ps.driverId = d.driverId WHERE ps.raceId = 841 GROUP BY ps.driverId ORDER BY stop_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 18,
        "db_id": "formula_1",
        "question": "What is the average number of points scored by constructors in race 18?",
        "evidence": "Calculate the average points in `constructorResults` for raceId = 18",
        "SQL": "SELECT AVG(points) FROM `constructorResults` WHERE raceId = 18;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 19,
        "db_id": "formula_1",
        "question": "Which driver had the fastest qualifying time in race 18?",
        "evidence": "Find the driver with the minimum q1, q2, or q3 time in `qualifying` for raceId = 18",
        "SQL": "SELECT d.forename, d.surname FROM `qualifying` q JOIN `drivers` d ON q.driverId = d.driverId WHERE q.raceId = 18 ORDER BY LEAST(q.q1, q.q2, q.q3) ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 20,
        "db_id": "formula_1",
        "question": "What is the total number of drivers who finished the race in race 18?",
        "evidence": "Count drivers with statusId corresponding to 'Finished' in `results` for raceId = 18",
        "SQL": "SELECT COUNT(*) FROM `results` WHERE raceId = 18 AND statusId = (SELECT statusId FROM `status` WHERE status = 'Finished');",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 21,
        "db_id": "formula_1",
        "question": "Which constructor had the most wins in the 2009 season?",
        "evidence": "Sum wins for each constructor in `constructorStandings` for races in 2009",
        "SQL": "SELECT c.name, SUM(cs.wins) as total_wins FROM `constructorStandings` cs JOIN `constructors` c ON cs.constructorId = c.constructorId JOIN `races` r ON cs.raceId = r.raceId WHERE r.year = 2009 GROUP BY cs.constructorId ORDER BY total_wins DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 22,
        "db_id": "formula_1",
        "question": "What is the average duration of pit stops for driver 1 in race 841?",
        "evidence": "Calculate the average duration in milliseconds for driverId = 1 in `pitStops` for raceId = 841",
        "SQL": "SELECT AVG(milliseconds) FROM `pitStops` WHERE raceId = 841 AND driverId = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 23,
        "db_id": "formula_1",
        "question": "Which driver had the most points in the 2009 Malaysian Grand Prix?",
        "evidence": "Find the driver with the maximum points in `results` for raceId corresponding to the 2009 Malaysian Grand Prix",
        "SQL": "SELECT d.forename, d.surname FROM `results` res JOIN `drivers` d ON res.driverId = d.driverId JOIN `races` r ON res.raceId = r.raceId WHERE r.name = 'Malaysian Grand Prix' AND r.year = 2009 ORDER BY res.points DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 24,
        "db_id": "formula_1",
        "question": "What is the total number of laps completed by all drivers in race 18?",
        "evidence": "Sum laps for all drivers in `results` for raceId = 18",
        "SQL": "SELECT SUM(laps) FROM `results` WHERE raceId = 18;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 25,
        "db_id": "formula_1",
        "question": "Which driver had the slowest lap time in race 1?",
        "evidence": "Find the driver with the maximum milliseconds in `lapTimes` for raceId = 1",
        "SQL": "SELECT d.forename, d.surname FROM `lapTimes` lt JOIN `drivers` d ON lt.driverId = d.driverId WHERE lt.raceId = 1 ORDER BY lt.milliseconds DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 26,
        "db_id": "formula_1",
        "question": "What is the total number of constructors that participated in the 2009 Australian Grand Prix?",
        "evidence": "Count distinct constructorId in `constructorResults` for raceId corresponding to the 2009 Australian Grand Prix",
        "SQL": "SELECT COUNT(DISTINCT cr.constructorId) FROM `constructorResults` cr JOIN `races` r ON cr.raceId = r.raceId WHERE r.name = 'Australian Grand Prix' AND r.year = 2009;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 27,
        "db_id": "formula_1",
        "question": "Which driver had the most wins in the 2009 season?",
        "evidence": "Sum wins for each driver in `driverStandings` for races in 2009",
        "SQL": "SELECT d.forename, d.surname, SUM(ds.wins) as total_wins FROM `driverStandings` ds JOIN `drivers` d ON ds.driverId = d.driverId JOIN `races` r ON ds.raceId = r.raceId WHERE r.year = 2009 GROUP BY ds.driverId ORDER BY total_wins DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 28,
        "db_id": "formula_1",
        "question": "What is the average number of laps completed by drivers in race 18?",
        "evidence": "Calculate the average laps in `results` for raceId = 18",
        "SQL": "SELECT AVG(laps) FROM `results` WHERE raceId = 18;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 29,
        "db_id": "formula_1",
        "question": "Which driver had the fastest lap time in the 2009 Australian Grand Prix?",
        "evidence": "Find the driver with the minimum fastestLapTime in `results` for raceId corresponding to the 2009 Australian Grand Prix",
        "SQL": "SELECT d.forename, d.surname FROM `results` res JOIN `drivers` d ON res.driverId = d.driverId JOIN `races` r ON res.raceId = r.raceId WHERE r.name = 'Australian Grand Prix' AND r.year = 2009 ORDER BY res.fastestLapTime ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 30,
        "db_id": "european_football_2",
        "question": "What is the name of the league in France?",
        "evidence": "League.name is unique and can be retrieved using the country_id for France.",
        "SQL": "SELECT name FROM `League` WHERE country_id = (SELECT id FROM `Country` WHERE name = 'France');",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 31,
        "db_id": "european_football_2",
        "question": "How many matches were played in the 2008/2009 season?",
        "evidence": "Count matches by filtering on the season column.",
        "SQL": "SELECT COUNT(*) FROM `Match` WHERE season = '2008/2009';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 32,
        "db_id": "european_football_2",
        "question": "Which team scored the most goals at home in the 2008/2009 season?",
        "evidence": "Sum home_team_goal and group by home_team_api_id, then order by total goals.",
        "SQL": "SELECT t.team_long_name, SUM(m.home_team_goal) as total_goals FROM `Match` m JOIN `Team` t ON m.home_team_api_id = t.team_api_id WHERE m.season = '2008/2009' GROUP BY m.home_team_api_id ORDER BY total_goals DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 33,
        "db_id": "european_football_2",
        "question": "What is the average height of players in the database?",
        "evidence": "Average height can be calculated using AVG(height) from Player table.",
        "SQL": "SELECT AVG(height) FROM `Player`;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 34,
        "db_id": "european_football_2",
        "question": "Which player has the highest overall rating?",
        "evidence": "Use MAX(overall_rating) to find the highest rating and join with Player table.",
        "SQL": "SELECT p.player_name, pa.overall_rating FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id ORDER BY pa.overall_rating DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 35,
        "db_id": "european_football_2",
        "question": "List all leagues in countries with a name starting with 'B'.",
        "evidence": "Join League and Country tables and filter country names starting with 'B'.",
        "SQL": "SELECT l.name FROM `League` l JOIN `Country` c ON l.country_id = c.id WHERE c.name LIKE 'B%';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 36,
        "db_id": "european_football_2",
        "question": "How many players have a preferred foot of 'right'?",
        "evidence": "Count players with preferred_foot = 'right' in Player_Attributes.",
        "SQL": "SELECT COUNT(*) FROM `Player_Attributes` WHERE preferred_foot = 'right';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 37,
        "db_id": "european_football_2",
        "question": "Which team has the shortest average player height?",
        "evidence": "Calculate average height per team and order by average height.",
        "SQL": "SELECT t.team_long_name, AVG(p.height) as avg_height FROM `Match` m JOIN `Team` t ON m.home_team_api_id = t.team_api_id JOIN `Player` p ON m.home_player_1 = p.player_api_id GROUP BY t.team_long_name ORDER BY avg_height ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 38,
        "db_id": "european_football_2",
        "question": "What is the total number of goals scored in the England Premier League?",
        "evidence": "Sum home_team_goal and away_team_goal for matches in the England Premier League.",
        "SQL": "SELECT SUM(home_team_goal + away_team_goal) FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'England Premier League');",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 39,
        "db_id": "european_football_2",
        "question": "Which player has the most potential?",
        "evidence": "Use MAX(potential) to find the highest potential and join with Player table.",
        "SQL": "SELECT p.player_name, pa.potential FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id ORDER BY pa.potential DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 40,
        "db_id": "european_football_2",
        "question": "Find the team with the highest build-up play speed.",
        "evidence": "Order by buildUpPlaySpeed in Team_Attributes and join with Team table.",
        "SQL": "SELECT t.team_long_name, ta.buildUpPlaySpeed FROM `Team_Attributes` ta JOIN `Team` t ON ta.team_api_id = t.team_api_id ORDER BY ta.buildUpPlaySpeed DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 41,
        "db_id": "european_football_2",
        "question": "How many teams are there in the database?",
        "evidence": "Count distinct team_api_id in Team table.",
        "SQL": "SELECT COUNT(DISTINCT team_api_id) FROM `Team`;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 42,
        "db_id": "european_football_2",
        "question": "Which country has the most leagues?",
        "evidence": "Count leagues per country and order by count.",
        "SQL": "SELECT c.name, COUNT(l.id) as league_count FROM `League` l JOIN `Country` c ON l.country_id = c.id GROUP BY c.name ORDER BY league_count DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 43,
        "db_id": "european_football_2",
        "question": "What is the average weight of players born after 1990?",
        "evidence": "Filter players by birthday and calculate average weight.",
        "SQL": "SELECT AVG(weight) FROM `Player` WHERE birthday > '1990-01-01';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 44,
        "db_id": "european_football_2",
        "question": "List the top 3 players with the highest dribbling skill.",
        "evidence": "Order by dribbling in Player_Attributes and join with Player table.",
        "SQL": "SELECT p.player_name, pa.dribbling FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id ORDER BY pa.dribbling DESC LIMIT 3;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 45,
        "db_id": "european_football_2",
        "question": "Which match had the highest total number of goals scored?",
        "evidence": "Sum home_team_goal and away_team_goal and order by total goals.",
        "SQL": "SELECT m.id, (m.home_team_goal + m.away_team_goal) as total_goals FROM `Match` m ORDER BY total_goals DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 46,
        "db_id": "european_football_2",
        "question": "What is the average overall rating of players in the Belgium Jupiler League?",
        "evidence": "Join Match, Player_Attributes, and Player tables and filter by league.",
        "SQL": "SELECT AVG(pa.overall_rating) FROM `Match` m JOIN `Player_Attributes` pa ON m.home_player_1 = pa.player_api_id JOIN `League` l ON m.league_id = l.id WHERE l.name = 'Belgium Jupiler League';",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 47,
        "db_id": "european_football_2",
        "question": "How many players have an overall rating above 80?",
        "evidence": "Count players with overall_rating > 80 in Player_Attributes.",
        "SQL": "SELECT COUNT(*) FROM `Player_Attributes` WHERE overall_rating > 80;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 48,
        "db_id": "european_football_2",
        "question": "Which team has the most aggressive defense?",
        "evidence": "Order by defenceAggression in Team_Attributes and join with Team table.",
        "SQL": "SELECT t.team_long_name, ta.defenceAggression FROM `Team_Attributes` ta JOIN `Team` t ON ta.team_api_id = t.team_api_id ORDER BY ta.defenceAggression DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 49,
        "db_id": "european_football_2",
        "question": "What is the total number of matches played by KRC Genk?",
        "evidence": "Count matches where KRC Genk is either home or away team.",
        "SQL": "SELECT COUNT(*) FROM `Match` WHERE home_team_api_id = (SELECT team_api_id FROM `Team` WHERE team_long_name = 'KRC Genk') OR away_team_api_id = (SELECT team_api_id FROM `Team` WHERE team_long_name = 'KRC Genk');",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 50,
        "db_id": "european_football_2",
        "question": "Find the player with the best heading accuracy.",
        "evidence": "Order by heading_accuracy in Player_Attributes and join with Player table.",
        "SQL": "SELECT p.player_name, pa.heading_accuracy FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id ORDER BY pa.heading_accuracy DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 51,
        "db_id": "european_football_2",
        "question": "Which league has the most matches played?",
        "evidence": "Count matches per league and order by count.",
        "SQL": "SELECT l.name, COUNT(m.id) as match_count FROM `Match` m JOIN `League` l ON m.league_id = l.id GROUP BY l.name ORDER BY match_count DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 52,
        "db_id": "european_football_2",
        "question": "What is the average potential of players in the France Ligue 1?",
        "evidence": "Join Match, Player_Attributes, and Player tables and filter by league.",
        "SQL": "SELECT AVG(pa.potential) FROM `Match` m JOIN `Player_Attributes` pa ON m.home_player_1 = pa.player_api_id JOIN `League` l ON m.league_id = l.id WHERE l.name = 'France Ligue 1';",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 53,
        "db_id": "european_football_2",
        "question": "How many players have a defensive work rate of 'high'?",
        "evidence": "Count players with defensive_work_rate = 'high' in Player_Attributes.",
        "SQL": "SELECT COUNT(*) FROM `Player_Attributes` WHERE defensive_work_rate = 'high';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 54,
        "db_id": "european_football_2",
        "question": "Which team has the best chance creation passing?",
        "evidence": "Order by chanceCreationPassing in Team_Attributes and join with Team table.",
        "SQL": "SELECT t.team_long_name, ta.chanceCreationPassing FROM `Team_Attributes` ta JOIN `Team` t ON ta.team_api_id = t.team_api_id ORDER BY ta.chanceCreationPassing DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 55,
        "db_id": "european_football_2",
        "question": "What is the average number of goals scored by home teams in the Scotland Premier League?",
        "evidence": "Filter matches by league and calculate average home_team_goal.",
        "SQL": "SELECT AVG(home_team_goal) FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Scotland Premier League');",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 56,
        "db_id": "european_football_2",
        "question": "Which player has the highest balance?",
        "evidence": "Order by balance in Player_Attributes and join with Player table.",
        "SQL": "SELECT p.player_name, pa.balance FROM `Player_Attributes` pa JOIN `Player` p ON pa.player_api_id = p.player_api_id ORDER BY pa.balance DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 57,
        "db_id": "european_football_2",
        "question": "How many matches ended in a draw in the 2008/2009 season?",
        "evidence": "Count matches where home_team_goal equals away_team_goal and filter by season.",
        "SQL": "SELECT COUNT(*) FROM `Match` WHERE home_team_goal = away_team_goal AND season = '2008/2009';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 58,
        "db_id": "european_football_2",
        "question": "Which team has the widest defense?",
        "evidence": "Order by defenceTeamWidth in Team_Attributes and join with Team table.",
        "SQL": "SELECT t.team_long_name, ta.defenceTeamWidth FROM `Team_Attributes` ta JOIN `Team` t ON ta.team_api_id = t.team_api_id ORDER BY ta.defenceTeamWidth DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 59,
        "db_id": "european_football_2",
        "question": "What is the average number of goals scored by away teams in the Belgium Jupiler League?",
        "evidence": "Filter matches by league and calculate average away_team_goal.",
        "SQL": "SELECT AVG(away_team_goal) FROM `Match` WHERE league_id = (SELECT id FROM `League` WHERE name = 'Belgium Jupiler League');",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 60,
        "db_id": "superhero",
        "question": "What is the full name of the superhero with ID 38?",
        "evidence": "superhero ID 38 refers to superhero.id = 38",
        "SQL": "SELECT full_name FROM superhero WHERE id = 38;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 61,
        "db_id": "superhero",
        "question": "How many superheroes are there in total?",
        "evidence": "COUNT(superhero.id) gives the total number of superheroes",
        "SQL": "SELECT COUNT(id) FROM superhero;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 62,
        "db_id": "superhero",
        "question": "What is the average height of superheroes?",
        "evidence": "AVG(height_cm) calculates the average height",
        "SQL": "SELECT AVG(height_cm) FROM superhero;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 63,
        "db_id": "superhero",
        "question": "Which superhero has the maximum weight?",
        "evidence": "MAX(weight_kg) finds the superhero with the maximum weight",
        "SQL": "SELECT superhero_name FROM superhero WHERE weight_kg = (SELECT MAX(weight_kg) FROM superhero);",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 64,
        "db_id": "superhero",
        "question": "List all superheroes with a 'Good' alignment.",
        "evidence": "alignment_id = 1 corresponds to 'Good'",
        "SQL": "SELECT superhero_name FROM superhero WHERE alignment_id = 1;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 65,
        "db_id": "superhero",
        "question": "How many superheroes have 'Amber' as their eye color?",
        "evidence": "eye_colour_id = 2 corresponds to 'Amber'",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE eye_colour_id = 2;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 66,
        "db_id": "superhero",
        "question": "Which superhero has the highest intelligence attribute?",
        "evidence": "attribute_id = 1 corresponds to 'Intelligence'",
        "SQL": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = 1 ORDER BY ha.attribute_value DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 67,
        "db_id": "superhero",
        "question": "What is the name of the superhero with ID 294?",
        "evidence": "superhero ID 294 refers to superhero.id = 294",
        "SQL": "SELECT superhero_name FROM superhero WHERE id = 294;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 68,
        "db_id": "superhero",
        "question": "Which publisher has the most superheroes?",
        "evidence": "COUNT(superhero.id) GROUP BY publisher_id ORDER BY COUNT DESC",
        "SQL": "SELECT p.publisher_name FROM publisher p JOIN superhero s ON p.id = s.publisher_id GROUP BY p.id ORDER BY COUNT(s.id) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 69,
        "db_id": "superhero",
        "question": "List all superheroes who are 'Aliens'.",
        "evidence": "race_id = 2 corresponds to 'Alien'",
        "SQL": "SELECT superhero_name FROM superhero WHERE race_id = 2;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 70,
        "db_id": "superhero",
        "question": "What is the most common hair color among superheroes?",
        "evidence": "COUNT(superhero.id) GROUP BY hair_colour_id ORDER BY COUNT DESC",
        "SQL": "SELECT c.colour FROM colour c JOIN superhero s ON c.id = s.hair_colour_id GROUP BY c.id ORDER BY COUNT(s.id) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 71,
        "db_id": "superhero",
        "question": "How many superheroes are published by 'Dark Horse Comics'?",
        "evidence": "publisher_name = 'Dark Horse Comics'",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 72,
        "db_id": "superhero",
        "question": "Which superhero has the lowest strength attribute?",
        "evidence": "attribute_id = 2 corresponds to 'Strength'",
        "SQL": "SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = 2 ORDER BY ha.attribute_value ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 73,
        "db_id": "superhero",
        "question": "List all female superheroes.",
        "evidence": "gender_id = 2 corresponds to 'Female'",
        "SQL": "SELECT superhero_name FROM superhero WHERE gender_id = 2;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 74,
        "db_id": "superhero",
        "question": "What is the total weight of all superheroes combined?",
        "evidence": "SUM(weight_kg) calculates the total weight",
        "SQL": "SELECT SUM(weight_kg) FROM superhero;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 75,
        "db_id": "superhero",
        "question": "Which superhero has the most superpowers?",
        "evidence": "COUNT(hero_power.power_id) GROUP BY hero_id ORDER BY COUNT DESC",
        "SQL": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.id ORDER BY COUNT(hp.power_id) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 76,
        "db_id": "superhero",
        "question": "How many superheroes have 'No Colour' as their skin color?",
        "evidence": "skin_colour_id = 1 corresponds to 'No Colour'",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE skin_colour_id = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 77,
        "db_id": "superhero",
        "question": "List all superheroes with 'Accelerated Healing' power.",
        "evidence": "power_id = 2 corresponds to 'Accelerated Healing'",
        "SQL": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id WHERE hp.power_id = 2;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 78,
        "db_id": "superhero",
        "question": "What is the average weight of superheroes with 'Good' alignment?",
        "evidence": "alignment_id = 1 corresponds to 'Good'",
        "SQL": "SELECT AVG(weight_kg) FROM superhero WHERE alignment_id = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 79,
        "db_id": "superhero",
        "question": "Which superhero has the longest full name?",
        "evidence": "LENGTH(full_name) finds the length of the full name",
        "SQL": "SELECT superhero_name FROM superhero ORDER BY LENGTH(full_name) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 80,
        "db_id": "superhero",
        "question": "How many superheroes have a height greater than 200 cm?",
        "evidence": "height_cm > 200",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE height_cm > 200;",
        "difficulty": "moderate",
        "question_type": "comparison"
    },
    {
        "question_id": 81,
        "db_id": "superhero",
        "question": "List all superheroes who are not 'Male'.",
        "evidence": "gender_id != 1 corresponds to not 'Male'",
        "SQL": "SELECT superhero_name FROM superhero WHERE gender_id != 1;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 82,
        "db_id": "superhero",
        "question": "What is the most common race among superheroes?",
        "evidence": "COUNT(superhero.id) GROUP BY race_id ORDER BY COUNT DESC",
        "SQL": "SELECT r.race FROM race r JOIN superhero s ON r.id = s.race_id GROUP BY r.id ORDER BY COUNT(s.id) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 83,
        "db_id": "superhero",
        "question": "Which superhero has the least number of superpowers?",
        "evidence": "COUNT(hero_power.power_id) GROUP BY hero_id ORDER BY COUNT ASC",
        "SQL": "SELECT s.superhero_name FROM superhero s LEFT JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.id ORDER BY COUNT(hp.power_id) ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 84,
        "db_id": "superhero",
        "question": "How many superheroes have 'Lantern Power Ring' as a superpower?",
        "evidence": "power_id = 3 corresponds to 'Lantern Power Ring'",
        "SQL": "SELECT COUNT(DISTINCT hero_id) FROM hero_power WHERE power_id = 3;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 85,
        "db_id": "superhero",
        "question": "List all superheroes with a height less than 180 cm.",
        "evidence": "height_cm < 180",
        "SQL": "SELECT superhero_name FROM superhero WHERE height_cm < 180;",
        "difficulty": "simple",
        "question_type": "comparison"
    },
    {
        "question_id": 86,
        "db_id": "superhero",
        "question": "What is the total number of unique superpowers possessed by superheroes?",
        "evidence": "COUNT(DISTINCT power_id) gives the total number of unique superpowers",
        "SQL": "SELECT COUNT(DISTINCT power_id) FROM hero_power;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 87,
        "db_id": "superhero",
        "question": "Which superhero has the shortest full name?",
        "evidence": "LENGTH(full_name) finds the length of the full name",
        "SQL": "SELECT superhero_name FROM superhero ORDER BY LENGTH(full_name) ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 88,
        "db_id": "superhero",
        "question": "How many superheroes have a weight less than 100 kg?",
        "evidence": "weight_kg < 100",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE weight_kg < 100;",
        "difficulty": "moderate",
        "question_type": "comparison"
    },
    {
        "question_id": 89,
        "db_id": "superhero",
        "question": "List all superheroes who have both 'Agility' and 'Accelerated Healing' powers.",
        "evidence": "power_id = 1 corresponds to 'Agility' and power_id = 2 corresponds to 'Accelerated Healing'",
        "SQL": "SELECT s.superhero_name FROM superhero s JOIN hero_power hp1 ON s.id = hp1.hero_id JOIN hero_power hp2 ON s.id = hp2.hero_id WHERE hp1.power_id = 1 AND hp2.power_id = 2;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 90,
        "db_id": "california_schools",
        "question": "What is the total enrollment for K-12 in Alameda County?",
        "evidence": "Total enrollment can be calculated using SUM(`Enrollment (K-12)`) WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT SUM(`Enrollment (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 91,
        "db_id": "california_schools",
        "question": "How many schools are there in Colusa County?",
        "evidence": "Count schools using COUNT(*) WHERE `County` = 'Colusa'",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Colusa';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 92,
        "db_id": "california_schools",
        "question": "What is the average SAT Math score for schools in Alameda County?",
        "evidence": "Average SAT Math score can be calculated using AVG(`AvgScrMath`) WHERE `cname` = 'Alameda'",
        "SQL": "SELECT AVG(`AvgScrMath`) FROM `satscores` WHERE `cname` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 93,
        "db_id": "california_schools",
        "question": "Which school in Alameda County has the highest percentage of students eligible for free meals?",
        "evidence": "Find the school with the highest `Percent (%) Eligible Free (K-12)` WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT `School Name` FROM `frpm` WHERE `County Name` = 'Alameda' ORDER BY `Percent (%) Eligible Free (K-12)` DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 94,
        "db_id": "california_schools",
        "question": "What is the ratio of schools in Colusa County to schools in Humboldt County?",
        "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)",
        "SQL": "SELECT (SELECT COUNT(*) FROM `schools` WHERE `County` = 'Colusa') / (SELECT COUNT(*) FROM `schools` WHERE `County` = 'Humboldt') AS ratio;",
        "difficulty": "moderate",
        "question_type": "comparison"
    },
    {
        "question_id": 95,
        "db_id": "california_schools",
        "question": "List all charter schools in Alameda County.",
        "evidence": "Charter schools can be identified using `Charter` = 1 WHERE `County` = 'Alameda'",
        "SQL": "SELECT `School` FROM `schools` WHERE `County` = 'Alameda' AND `Charter` = 1;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 96,
        "db_id": "california_schools",
        "question": "Which district in Alameda County has the most schools?",
        "evidence": "Count schools per district using COUNT(*) GROUP BY `District` WHERE `County` = 'Alameda'",
        "SQL": "SELECT `District`, COUNT(*) as school_count FROM `schools` WHERE `County` = 'Alameda' GROUP BY `District` ORDER BY school_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 97,
        "db_id": "california_schools",
        "question": "What is the total number of students eligible for FRPM in Alameda County?",
        "evidence": "Total eligible students can be calculated using SUM(`FRPM Count (K-12)`) WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT SUM(`FRPM Count (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 98,
        "db_id": "california_schools",
        "question": "Which school has the highest average SAT Reading score in Alameda County?",
        "evidence": "Find the school with the highest `AvgScrRead` WHERE `cname` = 'Alameda'",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `AvgScrRead` DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 99,
        "db_id": "california_schools",
        "question": "What is the average percentage of students eligible for FRPM in Alameda County?",
        "evidence": "Average percentage can be calculated using AVG(`Percent (%) Eligible FRPM (K-12)`) WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT AVG(`Percent (%) Eligible FRPM (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 100,
        "db_id": "california_schools",
        "question": "How many schools in Alameda County are directly funded charter schools?",
        "evidence": "Count directly funded charter schools using `Charter` = 1 AND `FundingType` = 'Directly funded' WHERE `County` = 'Alameda'",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda' AND `Charter` = 1 AND `FundingType` = 'Directly funded';",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 101,
        "db_id": "california_schools",
        "question": "What is the total number of 12th-grade students enrolled in Alameda County?",
        "evidence": "Total 12th-grade enrollment can be calculated using SUM(`enroll12`) WHERE `cname` = 'Alameda'",
        "SQL": "SELECT SUM(`enroll12`) FROM `satscores` WHERE `cname` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 102,
        "db_id": "california_schools",
        "question": "Which school in Alameda County has the lowest average SAT Writing score?",
        "evidence": "Find the school with the lowest `AvgScrWrite` WHERE `cname` = 'Alameda'",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `AvgScrWrite` ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 103,
        "db_id": "california_schools",
        "question": "What is the average enrollment for schools in Alameda County?",
        "evidence": "Average enrollment can be calculated using AVG(`Enrollment (K-12)`) WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT AVG(`Enrollment (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 104,
        "db_id": "california_schools",
        "question": "How many schools in Alameda County have an average SAT score greater than 1500?",
        "evidence": "Count schools with `NumGE1500` > 0 WHERE `cname` = 'Alameda'",
        "SQL": "SELECT COUNT(*) FROM `satscores` WHERE `cname` = 'Alameda' AND `NumGE1500` > 0;",
        "difficulty": "moderate",
        "question_type": "comparison"
    },
    {
        "question_id": 105,
        "db_id": "california_schools",
        "question": "Which school in Alameda County has the highest percentage of students eligible for free meals among high schools?",
        "evidence": "Find the high school with the highest `Percent (%) Eligible Free (K-12)` WHERE `County Name` = 'Alameda' AND `School Type` = 'High Schools (Public)'",
        "SQL": "SELECT `School Name` FROM `frpm` WHERE `County Name` = 'Alameda' AND `School Type` = 'High Schools (Public)' ORDER BY `Percent (%) Eligible Free (K-12)` DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 106,
        "db_id": "california_schools",
        "question": "What is the total number of students who took the SAT in Alameda County?",
        "evidence": "Total SAT test takers can be calculated using SUM(`NumTstTakr`) WHERE `cname` = 'Alameda'",
        "SQL": "SELECT SUM(`NumTstTakr`) FROM `satscores` WHERE `cname` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 107,
        "db_id": "california_schools",
        "question": "Which school in Alameda County has the highest average SAT score?",
        "evidence": "Find the school with the highest average of `AvgScrRead`, `AvgScrMath`, and `AvgScrWrite` WHERE `cname` = 'Alameda'",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY (`AvgScrRead` + `AvgScrMath` + `AvgScrWrite`) / 3 DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 108,
        "db_id": "california_schools",
        "question": "What is the average percentage of students eligible for free meals in Alameda County?",
        "evidence": "Average percentage can be calculated using AVG(`Percent (%) Eligible Free (K-12)`) WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT AVG(`Percent (%) Eligible Free (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 109,
        "db_id": "california_schools",
        "question": "How many schools in Alameda County have a charter school number?",
        "evidence": "Count schools with `Charter School Number` IS NOT NULL WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT COUNT(*) FROM `frpm` WHERE `County Name` = 'Alameda' AND `Charter School Number` IS NOT NULL;",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 110,
        "db_id": "california_schools",
        "question": "Which school in Alameda County has the lowest percentage of students eligible for FRPM?",
        "evidence": "Find the school with the lowest `Percent (%) Eligible FRPM (K-12)` WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT `School Name` FROM `frpm` WHERE `County Name` = 'Alameda' ORDER BY `Percent (%) Eligible FRPM (K-12)` ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 111,
        "db_id": "california_schools",
        "question": "What is the total number of schools in Alameda County?",
        "evidence": "Count schools using COUNT(*) WHERE `County` = 'Alameda'",
        "SQL": "SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 112,
        "db_id": "california_schools",
        "question": "Which school in Alameda County has the highest enrollment for K-12?",
        "evidence": "Find the school with the highest `Enrollment (K-12)` WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT `School Name` FROM `frpm` WHERE `County Name` = 'Alameda' ORDER BY `Enrollment (K-12)` DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 113,
        "db_id": "california_schools",
        "question": "What is the average SAT Writing score for schools in Alameda County?",
        "evidence": "Average SAT Writing score can be calculated using AVG(`AvgScrWrite`) WHERE `cname` = 'Alameda'",
        "SQL": "SELECT AVG(`AvgScrWrite`) FROM `satscores` WHERE `cname` = 'Alameda';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 114,
        "db_id": "california_schools",
        "question": "How many schools in Alameda County have a percentage of students eligible for FRPM greater than 50%?",
        "evidence": "Count schools with `Percent (%) Eligible FRPM (K-12)` > 0.5 WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT COUNT(*) FROM `frpm` WHERE `County Name` = 'Alameda' AND `Percent (%) Eligible FRPM (K-12)` > 0.5;",
        "difficulty": "moderate",
        "question_type": "comparison"
    },
    {
        "question_id": 115,
        "db_id": "california_schools",
        "question": "Which school in Alameda County has the highest average SAT Math score?",
        "evidence": "Find the school with the highest `AvgScrMath` WHERE `cname` = 'Alameda'",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `AvgScrMath` DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 116,
        "db_id": "california_schools",
        "question": "What is the total number of students eligible for free meals in Alameda County?",
        "evidence": "Total eligible students can be calculated using SUM(`Free Meal Count (K-12)`) WHERE `County Name` = 'Alameda'",
        "SQL": "SELECT SUM(`Free Meal Count (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 117,
        "db_id": "california_schools",
        "question": "Which school in Alameda County has the lowest average SAT Math score?",
        "evidence": "Find the school with the lowest `AvgScrMath` WHERE `cname` = 'Alameda'",
        "SQL": "SELECT `sname` FROM `satscores` WHERE `cname` = 'Alameda' ORDER BY `AvgScrMath` ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 118,
        "db_id": "california_schools",
        "question": "What is the average percentage of students eligible for free meals in Alameda County high schools?",
        "evidence": "Average percentage can be calculated using AVG(`Percent (%) Eligible Free (K-12)`) WHERE `County Name` = 'Alameda' AND `School Type` = 'High Schools (Public)'",
        "SQL": "SELECT AVG(`Percent (%) Eligible Free (K-12)`) FROM `frpm` WHERE `County Name` = 'Alameda' AND `School Type` = 'High Schools (Public)';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 119,
        "db_id": "california_schools",
        "question": "How many schools in Alameda County have an average SAT score greater than 1600?",
        "evidence": "Count schools with `NumGE1500` > 0 WHERE `cname` = 'Alameda' AND (`AvgScrRead` + `AvgScrMath` + `AvgScrWrite`) / 3 > 1600",
        "SQL": "SELECT COUNT(*) FROM `satscores` WHERE `cname` = 'Alameda' AND (`AvgScrRead` + `AvgScrMath` + `AvgScrWrite`) / 3 > 1600;",
        "difficulty": "challenge",
        "question_type": "comparison"
    },
    {
        "question_id": 120,
        "db_id": "card_games",
        "question": "What is the ID of the card with the artist 'Stephen Daniele'?",
        "evidence": "Artist 'Stephen Daniele' refers to artist column in cards table.",
        "SQL": "SELECT id FROM `cards` WHERE artist = 'Stephen Daniele';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 121,
        "db_id": "card_games",
        "question": "How many cards have a content warning?",
        "evidence": "Cards with content warning have hasContentWarning = 1.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE hasContentWarning = 1;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 122,
        "db_id": "card_games",
        "question": "What is the name of the oldest card in the database?",
        "evidence": "The oldest card refers to MIN(originalReleaseDate).",
        "SQL": "SELECT name FROM `cards` WHERE originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM `cards`);",
        "difficulty": "moderate",
        "question_type": "nested"
    },
    {
        "question_id": 123,
        "db_id": "card_games",
        "question": "Which card has the highest converted mana cost?",
        "evidence": "Use MAX(convertedManaCost) to find the card with the highest cost.",
        "SQL": "SELECT name FROM `cards` WHERE convertedManaCost = (SELECT MAX(convertedManaCost) FROM `cards`);",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 124,
        "db_id": "card_games",
        "question": "List all cards that are legal in the 'commander' format.",
        "evidence": "Legal play refers to status = 'Legal' and play format refers to format.",
        "SQL": "SELECT c.name FROM `cards` c JOIN `legalities` l ON c.uuid = l.uuid WHERE l.format = 'commander' AND l.status = 'Legal';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 125,
        "db_id": "card_games",
        "question": "How many unique artists are there in the cards table?",
        "evidence": "Count distinct artists using COUNT(DISTINCT artist).",
        "SQL": "SELECT COUNT(DISTINCT artist) FROM `cards`;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 126,
        "db_id": "card_games",
        "question": "What is the average converted mana cost of cards with the color 'black'?",
        "evidence": "Black color refers to colors = 'B'.",
        "SQL": "SELECT AVG(convertedManaCost) FROM `cards` WHERE colors = 'B';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 127,
        "db_id": "card_games",
        "question": "Which card has the most printings?",
        "evidence": "Use LENGTH(printings) to determine the number of printings.",
        "SQL": "SELECT name FROM `cards` ORDER BY LENGTH(printings) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 128,
        "db_id": "card_games",
        "question": "Find all cards that are artifacts.",
        "evidence": "Artifact card refers to originalType = 'Artifact'.",
        "SQL": "SELECT id FROM `cards` WHERE originalType = 'Artifact';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 129,
        "db_id": "card_games",
        "question": "What is the total number of cards available in both 'mtgo' and 'paper' formats?",
        "evidence": "Availability in both formats refers to availability = 'mtgo,paper'.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE availability = 'mtgo,paper';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 130,
        "db_id": "card_games",
        "question": "Which card has the highest edhrec rank?",
        "evidence": "Use MAX(edhrecRank) to find the card with the highest rank.",
        "SQL": "SELECT name FROM `cards` WHERE edhrecRank = (SELECT MAX(edhrecRank) FROM `cards`);",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 131,
        "db_id": "card_games",
        "question": "List all cards with a foreign language translation in German.",
        "evidence": "Foreign language refers to language in foreign_data.",
        "SQL": "SELECT c.name FROM `cards` c JOIN `foreign_data` f ON c.uuid = f.uuid WHERE f.language = 'German';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 132,
        "db_id": "card_games",
        "question": "What is the most common rarity among all cards?",
        "evidence": "Use COUNT(*) GROUP BY rarity to find the most common rarity.",
        "SQL": "SELECT rarity FROM `cards` GROUP BY rarity ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 133,
        "db_id": "card_games",
        "question": "How many cards have a converted mana cost greater than 5?",
        "evidence": "Use WHERE convertedManaCost > 5 to filter cards.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE convertedManaCost > 5;",
        "difficulty": "simple",
        "question_type": "comparison"
    },
    {
        "question_id": 134,
        "db_id": "card_games",
        "question": "Which card has the longest flavor text?",
        "evidence": "Use LENGTH(flavorText) to determine the longest text.",
        "SQL": "SELECT name FROM `cards` ORDER BY LENGTH(flavorText) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 135,
        "db_id": "card_games",
        "question": "What is the release date of the set with the largest total set size?",
        "evidence": "Use MAX(totalSetSize) to find the largest set.",
        "SQL": "SELECT releaseDate FROM `sets` WHERE totalSetSize = (SELECT MAX(totalSetSize) FROM `sets`);",
        "difficulty": "moderate",
        "question_type": "nested"
    },
    {
        "question_id": 136,
        "db_id": "card_games",
        "question": "List all cards that are mythic rarity.",
        "evidence": "Mythic card refers to rarity = 'mythic'.",
        "SQL": "SELECT id FROM `cards` WHERE rarity = 'mythic';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 137,
        "db_id": "card_games",
        "question": "How many cards have the keyword 'Flying'?",
        "evidence": "Use WHERE keywords LIKE '%Flying%' to filter cards.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE keywords LIKE '%Flying%';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 138,
        "db_id": "card_games",
        "question": "Which card has the most variations?",
        "evidence": "Use LENGTH(variations) to determine the number of variations.",
        "SQL": "SELECT name FROM `cards` ORDER BY LENGTH(variations) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 139,
        "db_id": "card_games",
        "question": "What is the average power of all creature cards?",
        "evidence": "Creature cards have type LIKE '%Creature%'.",
        "SQL": "SELECT AVG(CAST(power AS INTEGER)) FROM `cards` WHERE type LIKE '%Creature%';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 140,
        "db_id": "card_games",
        "question": "List all sets released after the year 2000.",
        "evidence": "Use WHERE releaseDate > '2000-12-31' to filter sets.",
        "SQL": "SELECT name FROM `sets` WHERE releaseDate > '2000-12-31';",
        "difficulty": "simple",
        "question_type": "comparison"
    },
    {
        "question_id": 141,
        "db_id": "card_games",
        "question": "Which card has the most legal formats?",
        "evidence": "Count legal formats using COUNT(*) GROUP BY uuid.",
        "SQL": "SELECT c.name FROM `cards` c JOIN `legalities` l ON c.uuid = l.uuid GROUP BY c.uuid ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 142,
        "db_id": "card_games",
        "question": "What is the most recent set released?",
        "evidence": "Use MAX(releaseDate) to find the most recent set.",
        "SQL": "SELECT name FROM `sets` WHERE releaseDate = (SELECT MAX(releaseDate) FROM `sets`);",
        "difficulty": "moderate",
        "question_type": "nested"
    },
    {
        "question_id": 143,
        "db_id": "card_games",
        "question": "How many cards have a toughness greater than their power?",
        "evidence": "Use WHERE CAST(toughness AS INTEGER) > CAST(power AS INTEGER) to filter cards.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE CAST(toughness AS INTEGER) > CAST(power AS INTEGER);",
        "difficulty": "moderate",
        "question_type": "comparison"
    },
    {
        "question_id": 144,
        "db_id": "card_games",
        "question": "List all cards that are available only in 'mtgo' format.",
        "evidence": "Availability in 'mtgo' only refers to availability = 'mtgo'.",
        "SQL": "SELECT id FROM `cards` WHERE availability = 'mtgo';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 145,
        "db_id": "card_games",
        "question": "Which card has the most rulings?",
        "evidence": "Count rulings using COUNT(*) GROUP BY uuid.",
        "SQL": "SELECT c.name FROM `cards` c JOIN `rulings` r ON c.uuid = r.uuid GROUP BY c.uuid ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 146,
        "db_id": "card_games",
        "question": "What is the name of the set with the smallest base set size?",
        "evidence": "Use MIN(baseSetSize) to find the smallest set.",
        "SQL": "SELECT name FROM `sets` WHERE baseSetSize = (SELECT MIN(baseSetSize) FROM `sets`);",
        "difficulty": "moderate",
        "question_type": "nested"
    },
    {
        "question_id": 147,
        "db_id": "card_games",
        "question": "How many cards have a frame version of '2003'?",
        "evidence": "Use WHERE frameVersion = '2003' to filter cards.",
        "SQL": "SELECT COUNT(*) FROM `cards` WHERE frameVersion = '2003';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 148,
        "db_id": "card_games",
        "question": "List all cards that have a promo type.",
        "evidence": "Cards with promo types have promoTypes IS NOT NULL.",
        "SQL": "SELECT id FROM `cards` WHERE promoTypes IS NOT NULL;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 149,
        "db_id": "card_games",
        "question": "Which card has the highest number of keywords?",
        "evidence": "Use LENGTH(keywords) to determine the number of keywords.",
        "SQL": "SELECT name FROM `cards` ORDER BY LENGTH(keywords) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 150,
        "db_id": "debit_card_specializing",
        "question": "What is the total consumption for customer with ID 5 in March 2013?",
        "evidence": "Consumption for a specific customer and date can be retrieved using WHERE `CustomerID` = 5 AND `Date` = '201303'",
        "SQL": "SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201303';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 151,
        "db_id": "debit_card_specializing",
        "question": "How many transactions were made at gas station with ID 3704?",
        "evidence": "Count transactions using COUNT(*) WHERE `GasStationID` = 3704",
        "SQL": "SELECT COUNT(*) FROM transactions_1k WHERE GasStationID = 3704;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 152,
        "db_id": "debit_card_specializing",
        "question": "What is the average price of products sold in transactions?",
        "evidence": "Average price can be calculated using AVG(`Price`)",
        "SQL": "SELECT AVG(Price) FROM transactions_1k;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 153,
        "db_id": "debit_card_specializing",
        "question": "Which gas station in the Czech Republic has the segment 'Premium'?",
        "evidence": "Filter gas stations using WHERE `Country` = 'CZE' AND `Segment` = 'Premium'",
        "SQL": "SELECT GasStationID FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 154,
        "db_id": "debit_card_specializing",
        "question": "What is the total amount of product 'Nafta' sold?",
        "evidence": "Join products and transactions_1k tables and sum the `Amount` for `Description` = 'Nafta'",
        "SQL": "SELECT SUM(t.Amount) FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE p.Description = 'Nafta';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 155,
        "db_id": "debit_card_specializing",
        "question": "Which customer segment uses EUR currency?",
        "evidence": "Filter customers using WHERE `Currency` = 'EUR'",
        "SQL": "SELECT DISTINCT Segment FROM customers WHERE Currency = 'EUR';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 156,
        "db_id": "debit_card_specializing",
        "question": "What is the highest price paid in any transaction?",
        "evidence": "Find the maximum price using MAX(`Price`)",
        "SQL": "SELECT MAX(Price) FROM transactions_1k;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 157,
        "db_id": "debit_card_specializing",
        "question": "Which product has the highest total sales amount?",
        "evidence": "Join products and transactions_1k tables and sum the `Amount` for each product, then order by total amount",
        "SQL": "SELECT p.Description, SUM(t.Amount) as TotalAmount FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalAmount DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 158,
        "db_id": "debit_card_specializing",
        "question": "How many unique customers made transactions in August 2012?",
        "evidence": "Count distinct `CustomerID` using WHERE `Date` LIKE '2012-08%'",
        "SQL": "SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Date LIKE '2012-08%';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 159,
        "db_id": "debit_card_specializing",
        "question": "What is the total consumption for all customers in February 2013?",
        "evidence": "Sum `Consumption` using WHERE `Date` = '201302'",
        "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201302';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 160,
        "db_id": "debit_card_specializing",
        "question": "Which gas station has the most transactions?",
        "evidence": "Count transactions for each gas station and order by count",
        "SQL": "SELECT GasStationID, COUNT(*) as TransactionCount FROM transactions_1k GROUP BY GasStationID ORDER BY TransactionCount DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 161,
        "db_id": "debit_card_specializing",
        "question": "What is the total price of all transactions made by customer with ID 46707?",
        "evidence": "Sum `Price` using WHERE `CustomerID` = 46707",
        "SQL": "SELECT SUM(Price) FROM transactions_1k WHERE CustomerID = 46707;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 162,
        "db_id": "debit_card_specializing",
        "question": "Which product has the lowest average price per transaction?",
        "evidence": "Calculate average price for each product and order by average price",
        "SQL": "SELECT p.Description, AVG(t.Price) as AvgPrice FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY AvgPrice ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 163,
        "db_id": "debit_card_specializing",
        "question": "How many transactions involved the product 'Special'?",
        "evidence": "Join products and transactions_1k tables and count transactions for `Description` = 'Special'",
        "SQL": "SELECT COUNT(*) FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE p.Description = 'Special';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 164,
        "db_id": "debit_card_specializing",
        "question": "What is the total amount of 'Nafta' sold at gas station with ID 3704?",
        "evidence": "Join products and transactions_1k tables and sum `Amount` for `Description` = 'Nafta' and `GasStationID` = 3704",
        "SQL": "SELECT SUM(t.Amount) FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE p.Description = 'Nafta' AND t.GasStationID = 3704;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 165,
        "db_id": "debit_card_specializing",
        "question": "Which customer has the highest total consumption in the year 2013?",
        "evidence": "Sum `Consumption` for each customer in 2013 and order by total consumption",
        "SQL": "SELECT CustomerID, SUM(Consumption) as TotalConsumption FROM yearmonth WHERE Date LIKE '2013%' GROUP BY CustomerID ORDER BY TotalConsumption DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 166,
        "db_id": "debit_card_specializing",
        "question": "What is the total number of transactions made by customers in the 'SME' segment?",
        "evidence": "Join customers and transactions_1k tables and count transactions for `Segment` = 'SME'",
        "SQL": "SELECT COUNT(*) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Segment = 'SME';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 167,
        "db_id": "debit_card_specializing",
        "question": "Which gas station chain has the most gas stations in the Czech Republic?",
        "evidence": "Count gas stations for each `ChainID` in `Country` = 'CZE' and order by count",
        "SQL": "SELECT ChainID, COUNT(*) as GasStationCount FROM gasstations WHERE Country = 'CZE' GROUP BY ChainID ORDER BY GasStationCount DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 168,
        "db_id": "debit_card_specializing",
        "question": "What is the total price of transactions made on August 24, 2012?",
        "evidence": "Sum `Price` using WHERE `Date` = '2012-08-24'",
        "SQL": "SELECT SUM(Price) FROM transactions_1k WHERE Date = '2012-08-24';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 169,
        "db_id": "debit_card_specializing",
        "question": "Which customer has the most transactions in August 2012?",
        "evidence": "Count transactions for each customer in August 2012 and order by count",
        "SQL": "SELECT CustomerID, COUNT(*) as TransactionCount FROM transactions_1k WHERE Date LIKE '2012-08%' GROUP BY CustomerID ORDER BY TransactionCount DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 170,
        "db_id": "debit_card_specializing",
        "question": "What is the average consumption per customer in July 2012?",
        "evidence": "Calculate average `Consumption` using WHERE `Date` = '201207'",
        "SQL": "SELECT AVG(Consumption) FROM yearmonth WHERE Date = '201207';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 171,
        "db_id": "debit_card_specializing",
        "question": "Which product has the highest total price in transactions?",
        "evidence": "Join products and transactions_1k tables and sum `Price` for each product, then order by total price",
        "SQL": "SELECT p.Description, SUM(t.Price) as TotalPrice FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalPrice DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 172,
        "db_id": "debit_card_specializing",
        "question": "How many transactions were made by customers in the 'LAM' segment?",
        "evidence": "Join customers and transactions_1k tables and count transactions for `Segment` = 'LAM'",
        "SQL": "SELECT COUNT(*) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Segment = 'LAM';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 173,
        "db_id": "debit_card_specializing",
        "question": "What is the total amount of 'Special' sold in August 2012?",
        "evidence": "Join products and transactions_1k tables and sum `Amount` for `Description` = 'Special' and `Date` LIKE '2012-08%'",
        "SQL": "SELECT SUM(t.Amount) FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE p.Description = 'Special' AND t.Date LIKE '2012-08%';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 174,
        "db_id": "debit_card_specializing",
        "question": "Which gas station has the highest total sales amount?",
        "evidence": "Sum `Amount` for each gas station and order by total amount",
        "SQL": "SELECT GasStationID, SUM(Amount) as TotalAmount FROM transactions_1k GROUP BY GasStationID ORDER BY TotalAmount DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 175,
        "db_id": "debit_card_specializing",
        "question": "What is the total consumption for customer with ID 5 in the year 2013?",
        "evidence": "Sum `Consumption` for `CustomerID` = 5 and `Date` LIKE '2013%'",
        "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 5 AND Date LIKE '2013%';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 176,
        "db_id": "debit_card_specializing",
        "question": "Which product has the most transactions?",
        "evidence": "Join products and transactions_1k tables and count transactions for each product, then order by count",
        "SQL": "SELECT p.Description, COUNT(*) as TransactionCount FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TransactionCount DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 177,
        "db_id": "debit_card_specializing",
        "question": "What is the total price of all transactions made by customers in the 'SME' segment?",
        "evidence": "Join customers and transactions_1k tables and sum `Price` for `Segment` = 'SME'",
        "SQL": "SELECT SUM(t.Price) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Segment = 'SME';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 178,
        "db_id": "debit_card_specializing",
        "question": "Which gas station has the highest average transaction price?",
        "evidence": "Calculate average `Price` for each gas station and order by average price",
        "SQL": "SELECT GasStationID, AVG(Price) as AvgPrice FROM transactions_1k GROUP BY GasStationID ORDER BY AvgPrice DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 179,
        "db_id": "debit_card_specializing",
        "question": "What is the total amount of 'Rucn\u00ed zad\u00e1n\u00ed' sold in the Czech Republic?",
        "evidence": "Join products and transactions_1k tables and sum `Amount` for `Description` = 'Rucn\u00ed zad\u00e1n\u00ed' and join with gasstations to filter `Country` = 'CZE'",
        "SQL": "SELECT SUM(t.Amount) FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE p.Description = 'Rucn\u00ed zad\u00e1n\u00ed' AND g.Country = 'CZE';",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 180,
        "db_id": "codebase_community",
        "question": "What is the UserDisplayName of the user who made the first post?",
        "evidence": "UserDisplayName is in the `postHistory` table, and the first post can be identified by the earliest CreationDate.",
        "SQL": "SELECT UserDisplayName FROM `postHistory` ORDER BY CreationDate ASC LIMIT 1;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 181,
        "db_id": "codebase_community",
        "question": "How many badges were awarded in June 2013?",
        "evidence": "Badges awarded in June 2013 can be found by filtering the `Date` column for '2013-06'.",
        "SQL": "SELECT COUNT(*) FROM badges WHERE strftime('%Y-%m', Date) = '2013-06';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 182,
        "db_id": "codebase_community",
        "question": "Which post has the highest score?",
        "evidence": "The highest score can be found by ordering the `Score` column in the `posts` table.",
        "SQL": "SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1;",
        "difficulty": "simple",
        "question_type": "ranking"
    },
    {
        "question_id": 183,
        "db_id": "codebase_community",
        "question": "What is the average score of all comments?",
        "evidence": "Average score can be calculated using AVG on the `Score` column in the `comments` table.",
        "SQL": "SELECT AVG(Score) FROM comments;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 184,
        "db_id": "codebase_community",
        "question": "How many posts have a view count greater than 1000?",
        "evidence": "View count greater than 1000 can be filtered using the `ViewCount` column in the `posts` table.",
        "SQL": "SELECT COUNT(*) FROM posts WHERE ViewCount > 1000;",
        "difficulty": "simple",
        "question_type": "comparison"
    },
    {
        "question_id": 185,
        "db_id": "codebase_community",
        "question": "List the top 3 users with the highest reputation.",
        "evidence": "Users with the highest reputation can be found by ordering the `Reputation` column in the `users` table.",
        "SQL": "SELECT DisplayName, Reputation FROM users ORDER BY Reputation DESC LIMIT 3;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 186,
        "db_id": "codebase_community",
        "question": "What is the total number of votes cast on posts?",
        "evidence": "Total votes can be counted using COUNT on the `votes` table.",
        "SQL": "SELECT COUNT(*) FROM votes;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 187,
        "db_id": "codebase_community",
        "question": "Which user received the 'Teacher' badge first?",
        "evidence": "The first 'Teacher' badge can be identified by the earliest `Date` in the `badges` table.",
        "SQL": "SELECT UserId FROM badges WHERE Name = 'Teacher' ORDER BY Date ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 188,
        "db_id": "codebase_community",
        "question": "How many posts have been linked to other posts?",
        "evidence": "Linked posts can be counted using the `postLinks` table.",
        "SQL": "SELECT COUNT(DISTINCT PostId) FROM postLinks;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 189,
        "db_id": "codebase_community",
        "question": "What is the most common tag used in posts?",
        "evidence": "The most common tag can be found by ordering the `Count` column in the `tags` table.",
        "SQL": "SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 190,
        "db_id": "codebase_community",
        "question": "Which post has the most comments?",
        "evidence": "The post with the most comments can be found by ordering the `CommentCount` column in the `posts` table.",
        "SQL": "SELECT Id, Title FROM posts ORDER BY CommentCount DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 191,
        "db_id": "codebase_community",
        "question": "How many users have a reputation greater than 100?",
        "evidence": "Users with a reputation greater than 100 can be filtered using the `Reputation` column in the `users` table.",
        "SQL": "SELECT COUNT(*) FROM users WHERE Reputation > 100;",
        "difficulty": "moderate",
        "question_type": "comparison"
    },
    {
        "question_id": 192,
        "db_id": "codebase_community",
        "question": "What is the total number of distinct tags used in posts?",
        "evidence": "Distinct tags can be counted using the `tags` table.",
        "SQL": "SELECT COUNT(DISTINCT TagName) FROM tags;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 193,
        "db_id": "codebase_community",
        "question": "Which user has the most views on their profile?",
        "evidence": "The user with the most views can be found by ordering the `Views` column in the `users` table.",
        "SQL": "SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 194,
        "db_id": "codebase_community",
        "question": "How many posts were created in 2010?",
        "evidence": "Posts created in 2010 can be filtered using the `CreaionDate` column in the `posts` table.",
        "SQL": "SELECT COUNT(*) FROM posts WHERE strftime('%Y', CreaionDate) = '2010';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 195,
        "db_id": "codebase_community",
        "question": "What is the average number of views per post?",
        "evidence": "Average views per post can be calculated using AVG on the `ViewCount` column in the `posts` table.",
        "SQL": "SELECT AVG(ViewCount) FROM posts;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 196,
        "db_id": "codebase_community",
        "question": "Which post has the most votes?",
        "evidence": "The post with the most votes can be found by counting votes in the `votes` table and grouping by `PostId`.",
        "SQL": "SELECT PostId, COUNT(*) as vote_count FROM votes GROUP BY PostId ORDER BY vote_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 197,
        "db_id": "codebase_community",
        "question": "Which user has received the most badges?",
        "evidence": "The user with the most badges can be found by counting badges in the `badges` table and grouping by `UserId`.",
        "SQL": "SELECT UserId, COUNT(*) as badge_count FROM badges GROUP BY UserId ORDER BY badge_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 198,
        "db_id": "codebase_community",
        "question": "What is the most recent post created by a user with the 'Teacher' badge?",
        "evidence": "Join `badges` and `posts` tables on `UserId` and `OwnerUserId` respectively, filter by badge name 'Teacher', and order by `CreaionDate`.",
        "SQL": "SELECT p.Id, p.Title FROM posts p JOIN badges b ON p.OwnerUserId = b.UserId WHERE b.Name = 'Teacher' ORDER BY p.CreaionDate DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 199,
        "db_id": "codebase_community",
        "question": "How many comments were made by users with a reputation over 100?",
        "evidence": "Join `comments` and `users` tables on `UserId`, filter by `Reputation` > 100.",
        "SQL": "SELECT COUNT(*) FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.Reputation > 100;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 200,
        "db_id": "codebase_community",
        "question": "Which post has the highest number of linked posts?",
        "evidence": "Count links in `postLinks` table grouped by `PostId`.",
        "SQL": "SELECT PostId, COUNT(*) as link_count FROM postLinks GROUP BY PostId ORDER BY link_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 201,
        "db_id": "codebase_community",
        "question": "What is the average score of posts with the 'bayesian' tag?",
        "evidence": "Join `posts` and `tags` tables on `Id` and `ExcerptPostId`, filter by `TagName` 'bayesian'.",
        "SQL": "SELECT AVG(p.Score) FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 202,
        "db_id": "codebase_community",
        "question": "Which user has the most upvotes?",
        "evidence": "The user with the most upvotes can be found by ordering the `UpVotes` column in the `users` table.",
        "SQL": "SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 203,
        "db_id": "codebase_community",
        "question": "How many posts have been closed?",
        "evidence": "Closed posts can be identified by non-null `ClosedDate` in the `posts` table.",
        "SQL": "SELECT COUNT(*) FROM posts WHERE ClosedDate IS NOT NULL;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 204,
        "db_id": "codebase_community",
        "question": "What is the most common post history type?",
        "evidence": "The most common post history type can be found by counting `PostHistoryTypeId` in the `postHistory` table.",
        "SQL": "SELECT PostHistoryTypeId, COUNT(*) as type_count FROM postHistory GROUP BY PostHistoryTypeId ORDER BY type_count DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 205,
        "db_id": "codebase_community",
        "question": "Which user has the most downvotes?",
        "evidence": "The user with the most downvotes can be found by ordering the `DownVotes` column in the `users` table.",
        "SQL": "SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 206,
        "db_id": "codebase_community",
        "question": "How many users have never accessed their account after creation?",
        "evidence": "Users who never accessed their account can be identified by `LastAccessDate` equal to `CreationDate`.",
        "SQL": "SELECT COUNT(*) FROM users WHERE LastAccessDate = CreationDate;",
        "difficulty": "challenge",
        "question_type": "comparison"
    },
    {
        "question_id": 207,
        "db_id": "codebase_community",
        "question": "What is the total number of posts with the 'hypothesis-testing' tag?",
        "evidence": "Posts with the 'hypothesis-testing' tag can be found by joining `posts` and `tags` tables on `Id` and `ExcerptPostId`.",
        "SQL": "SELECT COUNT(*) FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing';",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 208,
        "db_id": "codebase_community",
        "question": "Which user has the most favorite posts?",
        "evidence": "The user with the most favorite posts can be found by ordering the `FavoriteCount` column in the `posts` table.",
        "SQL": "SELECT OwnerUserId, SUM(FavoriteCount) as total_favorites FROM posts GROUP BY OwnerUserId ORDER BY total_favorites DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 209,
        "db_id": "codebase_community",
        "question": "What is the average age of users who have received a badge?",
        "evidence": "Join `users` and `badges` tables on `Id` and `UserId`, calculate average `Age`.",
        "SQL": "SELECT AVG(u.Age) FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Age IS NOT NULL;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 210,
        "db_id": "toxicology",
        "question": "What is the element of the atom with atom_id 'TR000_1'?",
        "evidence": "The element can be retrieved directly from the `atom` table using the atom_id.",
        "SQL": "SELECT `element` FROM `atom` WHERE `atom_id` = 'TR000_1';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 211,
        "db_id": "toxicology",
        "question": "How many atoms are there in the molecule with molecule_id 'TR000'?",
        "evidence": "Count the number of atoms in the `atom` table where molecule_id is 'TR000'.",
        "SQL": "SELECT COUNT(*) FROM `atom` WHERE `molecule_id` = 'TR000';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 212,
        "db_id": "toxicology",
        "question": "Which molecule has the label '+'?",
        "evidence": "Retrieve molecule_id from the `molecule` table where label is '+'.",
        "SQL": "SELECT `molecule_id` FROM `molecule` WHERE `label` = '+';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 213,
        "db_id": "toxicology",
        "question": "What is the bond type of the bond with bond_id 'TR000_1_2'?",
        "evidence": "The bond type can be retrieved directly from the `bond` table using the bond_id.",
        "SQL": "SELECT `bond_type` FROM `bond` WHERE `bond_id` = 'TR000_1_2';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 214,
        "db_id": "toxicology",
        "question": "How many bonds are associated with the molecule 'TR000'?",
        "evidence": "Count the number of bonds in the `bond` table where molecule_id is 'TR000'.",
        "SQL": "SELECT COUNT(*) FROM `bond` WHERE `molecule_id` = 'TR000';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 215,
        "db_id": "toxicology",
        "question": "Which atom is connected to atom 'TR000_2'?",
        "evidence": "Retrieve atom_id2 from the `connected` table where atom_id is 'TR000_2'.",
        "SQL": "SELECT `atom_id2` FROM `connected` WHERE `atom_id` = 'TR000_2';",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 216,
        "db_id": "toxicology",
        "question": "What are the elements of all atoms in the molecule with molecule_id 'TR000'?",
        "evidence": "Retrieve elements from the `atom` table where molecule_id is 'TR000'.",
        "SQL": "SELECT `element` FROM `atom` WHERE `molecule_id` = 'TR000';",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 217,
        "db_id": "toxicology",
        "question": "Which molecule has the most atoms?",
        "evidence": "Count atoms for each molecule and order by count descending.",
        "SQL": "SELECT `molecule_id`, COUNT(*) as atom_count FROM `atom` GROUP BY `molecule_id` ORDER BY atom_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 218,
        "db_id": "toxicology",
        "question": "What is the label of the molecule with the fewest bonds?",
        "evidence": "Count bonds for each molecule and order by count ascending.",
        "SQL": "SELECT `molecule`.`label` FROM `molecule` JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` GROUP BY `molecule`.`molecule_id` ORDER BY COUNT(`bond`.`bond_id`) ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 219,
        "db_id": "toxicology",
        "question": "List all bonds and their types for the molecule with molecule_id 'TR000'.",
        "evidence": "Retrieve bond_id and bond_type from the `bond` table where molecule_id is 'TR000'.",
        "SQL": "SELECT `bond_id`, `bond_type` FROM `bond` WHERE `molecule_id` = 'TR000';",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 220,
        "db_id": "toxicology",
        "question": "What is the most common element in the molecule with molecule_id 'TR000'?",
        "evidence": "Count occurrences of each element in the `atom` table where molecule_id is 'TR000'.",
        "SQL": "SELECT `element`, COUNT(*) as element_count FROM `atom` WHERE `molecule_id` = 'TR000' GROUP BY `element` ORDER BY element_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 221,
        "db_id": "toxicology",
        "question": "Which atoms are directly connected by the bond with bond_id 'TR000_1_2'?",
        "evidence": "Retrieve atom_id and atom_id2 from the `connected` table where bond_id is 'TR000_1_2'.",
        "SQL": "SELECT `atom_id`, `atom_id2` FROM `connected` WHERE `bond_id` = 'TR000_1_2';",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 222,
        "db_id": "toxicology",
        "question": "How many unique elements are there in the molecule with molecule_id 'TR000'?",
        "evidence": "Count distinct elements in the `atom` table where molecule_id is 'TR000'.",
        "SQL": "SELECT COUNT(DISTINCT `element`) FROM `atom` WHERE `molecule_id` = 'TR000';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 223,
        "db_id": "toxicology",
        "question": "What is the label of the molecule with molecule_id 'TR002'?",
        "evidence": "Retrieve label from the `molecule` table where molecule_id is 'TR002'.",
        "SQL": "SELECT `label` FROM `molecule` WHERE `molecule_id` = 'TR002';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 224,
        "db_id": "toxicology",
        "question": "Which molecule has the label '-'?",
        "evidence": "Retrieve molecule_id from the `molecule` table where label is '-'.",
        "SQL": "SELECT `molecule_id` FROM `molecule` WHERE `label` = '-';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 225,
        "db_id": "toxicology",
        "question": "What is the bond type of the bond connecting atoms 'TR000_2' and 'TR000_3'?",
        "evidence": "Retrieve bond_id from `connected` table and then bond_type from `bond` table.",
        "SQL": "SELECT `bond`.`bond_type` FROM `bond` JOIN `connected` ON `bond`.`bond_id` = `connected`.`bond_id` WHERE `connected`.`atom_id` = 'TR000_2' AND `connected`.`atom_id2` = 'TR000_3';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 226,
        "db_id": "toxicology",
        "question": "How many molecules have a positive label?",
        "evidence": "Count molecules in the `molecule` table where label is '+'.",
        "SQL": "SELECT COUNT(*) FROM `molecule` WHERE `label` = '+';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 227,
        "db_id": "toxicology",
        "question": "Which atom is connected to the most other atoms?",
        "evidence": "Count connections for each atom in the `connected` table.",
        "SQL": "SELECT `atom_id`, COUNT(*) as connection_count FROM `connected` GROUP BY `atom_id` ORDER BY connection_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 228,
        "db_id": "toxicology",
        "question": "What are the molecule_ids of all molecules with at least one bond of type '-'?",
        "evidence": "Retrieve molecule_id from `bond` table where bond_type is '-'.",
        "SQL": "SELECT DISTINCT `molecule_id` FROM `bond` WHERE `bond_type` = '-';",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 229,
        "db_id": "toxicology",
        "question": "What is the total number of bonds in the database?",
        "evidence": "Count all entries in the `bond` table.",
        "SQL": "SELECT COUNT(*) FROM `bond`;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 230,
        "db_id": "toxicology",
        "question": "Which molecule has the highest number of unique elements?",
        "evidence": "Count distinct elements for each molecule in the `atom` table.",
        "SQL": "SELECT `molecule_id`, COUNT(DISTINCT `element`) as unique_elements FROM `atom` GROUP BY `molecule_id` ORDER BY unique_elements DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 231,
        "db_id": "toxicology",
        "question": "What is the label of the molecule with the most bonds?",
        "evidence": "Count bonds for each molecule and order by count descending.",
        "SQL": "SELECT `molecule`.`label` FROM `molecule` JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` GROUP BY `molecule`.`molecule_id` ORDER BY COUNT(`bond`.`bond_id`) DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 232,
        "db_id": "toxicology",
        "question": "How many atoms are connected by the bond with bond_id 'TR000_2_3'?",
        "evidence": "Count distinct atom_ids in the `connected` table where bond_id is 'TR000_2_3'.",
        "SQL": "SELECT COUNT(DISTINCT `atom_id`) FROM `connected` WHERE `bond_id` = 'TR000_2_3';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 233,
        "db_id": "toxicology",
        "question": "What are the molecule_ids of all molecules with no bonds?",
        "evidence": "Find molecule_ids in `molecule` table not present in `bond` table.",
        "SQL": "SELECT `molecule_id` FROM `molecule` WHERE `molecule_id` NOT IN (SELECT DISTINCT `molecule_id` FROM `bond`);",
        "difficulty": "challenge",
        "question_type": "nested"
    },
    {
        "question_id": 234,
        "db_id": "toxicology",
        "question": "Which atom has the most connections in the molecule with molecule_id 'TR000'?",
        "evidence": "Count connections for each atom in the `connected` table where molecule_id is 'TR000'.",
        "SQL": "SELECT `atom_id`, COUNT(*) as connection_count FROM `connected` WHERE `atom_id` IN (SELECT `atom_id` FROM `atom` WHERE `molecule_id` = 'TR000') GROUP BY `atom_id` ORDER BY connection_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 235,
        "db_id": "toxicology",
        "question": "What is the bond type of the bond connecting atoms 'TR000_1' and 'TR000_2'?",
        "evidence": "Retrieve bond_id from `connected` table and then bond_type from `bond` table.",
        "SQL": "SELECT `bond`.`bond_type` FROM `bond` JOIN `connected` ON `bond`.`bond_id` = `connected`.`bond_id` WHERE `connected`.`atom_id` = 'TR000_1' AND `connected`.`atom_id2` = 'TR000_2';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 236,
        "db_id": "toxicology",
        "question": "How many molecules have a negative label?",
        "evidence": "Count molecules in the `molecule` table where label is '-'.",
        "SQL": "SELECT COUNT(*) FROM `molecule` WHERE `label` = '-';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 237,
        "db_id": "toxicology",
        "question": "Which atom is connected to the fewest other atoms?",
        "evidence": "Count connections for each atom in the `connected` table.",
        "SQL": "SELECT `atom_id`, COUNT(*) as connection_count FROM `connected` GROUP BY `atom_id` ORDER BY connection_count ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 238,
        "db_id": "toxicology",
        "question": "What are the molecule_ids of all molecules with at least one bond of type '+'?",
        "evidence": "Retrieve molecule_id from `bond` table where bond_type is '+'.",
        "SQL": "SELECT DISTINCT `molecule_id` FROM `bond` WHERE `bond_type` = '+';",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 239,
        "db_id": "toxicology",
        "question": "What is the total number of atoms in the database?",
        "evidence": "Count all entries in the `atom` table.",
        "SQL": "SELECT COUNT(*) FROM `atom`;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 240,
        "db_id": "thrombosis_prediction",
        "question": "What is the aCL IgG level for the examination conducted on 1997-05-27?",
        "evidence": "Exact retrieval of aCL IgG level for a specific examination date.",
        "SQL": "SELECT `aCL IgG` FROM `Examination` WHERE `Examination Date` = '1997-05-27';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 241,
        "db_id": "thrombosis_prediction",
        "question": "How many examinations were conducted after January 1, 1997?",
        "evidence": "Examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'.",
        "SQL": "SELECT COUNT(*) FROM `Examination` WHERE `Examination Date` > '1997-01-01';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 242,
        "db_id": "thrombosis_prediction",
        "question": "What is the average aCL IgM level for all examinations?",
        "evidence": "Average aCL IgM level can be calculated using AVG(`aCL IgM`).",
        "SQL": "SELECT AVG(`aCL IgM`) FROM `Examination`;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 243,
        "db_id": "thrombosis_prediction",
        "question": "Which patient has the highest LDH level recorded in the laboratory?",
        "evidence": "Use ORDER BY `LDH` DESC to find the highest LDH level.",
        "SQL": "SELECT `ID`, `LDH` FROM `Laboratory` ORDER BY `LDH` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 244,
        "db_id": "thrombosis_prediction",
        "question": "List all patients diagnosed with SLE.",
        "evidence": "Diagnosis refers to `Diagnosis` in the `Patient` table.",
        "SQL": "SELECT `ID`, `SEX`, `Birthday` FROM `Patient` WHERE `Diagnosis` = 'SLE';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 245,
        "db_id": "thrombosis_prediction",
        "question": "What is the total number of patients with thrombosis?",
        "evidence": "Thrombosis is indicated by `Thrombosis` = 1 in the `Examination` table.",
        "SQL": "SELECT COUNT(DISTINCT `ID`) FROM `Examination` WHERE `Thrombosis` = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 246,
        "db_id": "thrombosis_prediction",
        "question": "Which examination has the highest aCL IgA level?",
        "evidence": "Use ORDER BY `aCL IgA` DESC to find the highest aCL IgA level.",
        "SQL": "SELECT `ID`, `Examination Date`, `aCL IgA` FROM `Examination` ORDER BY `aCL IgA` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 247,
        "db_id": "thrombosis_prediction",
        "question": "What is the average age of patients diagnosed with PSS?",
        "evidence": "Calculate age using `Birthday` and filter by `Diagnosis` = 'PSS'.",
        "SQL": "SELECT AVG(YEAR(CURDATE()) - YEAR(`Birthday`)) FROM `Patient` WHERE `Diagnosis` = 'PSS';",
        "difficulty": "challenge",
        "question_type": "aggregation"
    },
    {
        "question_id": 248,
        "db_id": "thrombosis_prediction",
        "question": "How many patients have a normal activated partial prothrombin time?",
        "evidence": "Normal activated partial prothrombin time refers to APTT < 45.",
        "SQL": "SELECT COUNT(DISTINCT `ID`) FROM `Laboratory` WHERE `APTT` < 45;",
        "difficulty": "moderate",
        "question_type": "comparison"
    },
    {
        "question_id": 249,
        "db_id": "thrombosis_prediction",
        "question": "Which patient has the earliest recorded examination date?",
        "evidence": "Use ORDER BY `Examination Date` ASC to find the earliest date.",
        "SQL": "SELECT `ID`, `Examination Date` FROM `Examination` ORDER BY `Examination Date` ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 250,
        "db_id": "thrombosis_prediction",
        "question": "What is the most common diagnosis among patients?",
        "evidence": "Use GROUP BY `Diagnosis` and COUNT to find the most common diagnosis.",
        "SQL": "SELECT `Diagnosis`, COUNT(*) as count FROM `Patient` GROUP BY `Diagnosis` ORDER BY count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "aggregation"
    },
    {
        "question_id": 251,
        "db_id": "thrombosis_prediction",
        "question": "List all examinations with severe degree of thrombosis.",
        "evidence": "Severe degree of thrombosis refers to `Thrombosis` = 2.",
        "SQL": "SELECT * FROM `Examination` WHERE `Thrombosis` = 2;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 252,
        "db_id": "thrombosis_prediction",
        "question": "What is the highest T-BIL level recorded in the laboratory?",
        "evidence": "Use MAX(`T-BIL`) to find the highest T-BIL level.",
        "SQL": "SELECT MAX(`T-BIL`) FROM `Laboratory`;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 253,
        "db_id": "thrombosis_prediction",
        "question": "Which patient has the most recent admission date?",
        "evidence": "Use ORDER BY `Admission` DESC to find the most recent admission.",
        "SQL": "SELECT `ID`, `Admission` FROM `Patient` ORDER BY `Admission` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 254,
        "db_id": "thrombosis_prediction",
        "question": "How many patients have been diagnosed with both SLE and PSS?",
        "evidence": "Check for patients with `Diagnosis` containing both 'SLE' and 'PSS'.",
        "SQL": "SELECT COUNT(*) FROM `Patient` WHERE `Diagnosis` LIKE '%SLE%' AND `Diagnosis` LIKE '%PSS%';",
        "difficulty": "challenge",
        "question_type": "comparison"
    },
    {
        "question_id": 255,
        "db_id": "thrombosis_prediction",
        "question": "What is the average PLT level for all laboratory records?",
        "evidence": "Average PLT level can be calculated using AVG(`PLT`).",
        "SQL": "SELECT AVG(`PLT`) FROM `Laboratory`;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 256,
        "db_id": "thrombosis_prediction",
        "question": "Which patient has the highest number of examinations?",
        "evidence": "Use COUNT and GROUP BY `ID` to find the patient with the most examinations.",
        "SQL": "SELECT `ID`, COUNT(*) as exam_count FROM `Examination` GROUP BY `ID` ORDER BY exam_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 257,
        "db_id": "thrombosis_prediction",
        "question": "List all patients with a diagnosis of MCTD.",
        "evidence": "Diagnosis refers to `Diagnosis` in the `Patient` table.",
        "SQL": "SELECT `ID`, `SEX`, `Birthday` FROM `Patient` WHERE `Diagnosis` = 'MCTD';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 258,
        "db_id": "thrombosis_prediction",
        "question": "What is the average age of patients with thrombosis?",
        "evidence": "Calculate age using `Birthday` and filter by `Thrombosis` = 1.",
        "SQL": "SELECT AVG(YEAR(CURDATE()) - YEAR(`Birthday`)) FROM `Patient` WHERE `ID` IN (SELECT DISTINCT `ID` FROM `Examination` WHERE `Thrombosis` = 1);",
        "difficulty": "challenge",
        "question_type": "nested"
    },
    {
        "question_id": 259,
        "db_id": "thrombosis_prediction",
        "question": "Which examination has the lowest aCL IgG level?",
        "evidence": "Use ORDER BY `aCL IgG` ASC to find the lowest aCL IgG level.",
        "SQL": "SELECT `ID`, `Examination Date`, `aCL IgG` FROM `Examination` ORDER BY `aCL IgG` ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 260,
        "db_id": "thrombosis_prediction",
        "question": "How many patients have a diagnosis of AMI?",
        "evidence": "Diagnosis refers to `Diagnosis` in the `Patient` table.",
        "SQL": "SELECT COUNT(*) FROM `Patient` WHERE `Diagnosis` = 'AMI';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 261,
        "db_id": "thrombosis_prediction",
        "question": "What is the average GOT level for all laboratory records?",
        "evidence": "Average GOT level can be calculated using AVG(`GOT`).",
        "SQL": "SELECT AVG(`GOT`) FROM `Laboratory`;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 262,
        "db_id": "thrombosis_prediction",
        "question": "Which patient has the highest T-CHO level recorded in the laboratory?",
        "evidence": "Use ORDER BY `T-CHO` DESC to find the highest T-CHO level.",
        "SQL": "SELECT `ID`, `T-CHO` FROM `Laboratory` ORDER BY `T-CHO` DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 263,
        "db_id": "thrombosis_prediction",
        "question": "List all patients with a normal activated partial prothrombin time.",
        "evidence": "Normal activated partial prothrombin time refers to APTT < 45.",
        "SQL": "SELECT DISTINCT `ID` FROM `Laboratory` WHERE `APTT` < 45;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 264,
        "db_id": "thrombosis_prediction",
        "question": "What is the average aCL IgA level for all examinations?",
        "evidence": "Average aCL IgA level can be calculated using AVG(`aCL IgA`).",
        "SQL": "SELECT AVG(`aCL IgA`) FROM `Examination`;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 265,
        "db_id": "thrombosis_prediction",
        "question": "Which patient has the earliest birthday?",
        "evidence": "Use ORDER BY `Birthday` ASC to find the earliest birthday.",
        "SQL": "SELECT `ID`, `Birthday` FROM `Patient` ORDER BY `Birthday` ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 266,
        "db_id": "thrombosis_prediction",
        "question": "How many patients have a diagnosis of both RA and SLE?",
        "evidence": "Check for patients with `Diagnosis` containing both 'RA' and 'SLE'.",
        "SQL": "SELECT COUNT(*) FROM `Patient` WHERE `Diagnosis` LIKE '%RA%' AND `Diagnosis` LIKE '%SLE%';",
        "difficulty": "challenge",
        "question_type": "comparison"
    },
    {
        "question_id": 267,
        "db_id": "thrombosis_prediction",
        "question": "What is the average HGB level for all laboratory records?",
        "evidence": "Average HGB level can be calculated using AVG(`HGB`).",
        "SQL": "SELECT AVG(`HGB`) FROM `Laboratory`;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 268,
        "db_id": "thrombosis_prediction",
        "question": "Which patient has the highest number of laboratory records?",
        "evidence": "Use COUNT and GROUP BY `ID` to find the patient with the most laboratory records.",
        "SQL": "SELECT `ID`, COUNT(*) as lab_count FROM `Laboratory` GROUP BY `ID` ORDER BY lab_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 269,
        "db_id": "thrombosis_prediction",
        "question": "List all patients with a diagnosis of PSS.",
        "evidence": "Diagnosis refers to `Diagnosis` in the `Patient` table.",
        "SQL": "SELECT `ID`, `SEX`, `Birthday` FROM `Patient` WHERE `Diagnosis` = 'PSS';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 270,
        "db_id": "student_club",
        "question": "What is the email of the member named Angela Sanders?",
        "evidence": "Retrieve email from `member` where `first_name` = 'Angela' and `last_name` = 'Sanders'.",
        "SQL": "SELECT email FROM `member` WHERE first_name = 'Angela' AND last_name = 'Sanders';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 271,
        "db_id": "student_club",
        "question": "How many events are currently open?",
        "evidence": "Count events where `status` = 'Open'.",
        "SQL": "SELECT COUNT(*) FROM `event` WHERE status = 'Open';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 272,
        "db_id": "student_club",
        "question": "What is the total amount spent on food?",
        "evidence": "Sum `spent` from `budget` where `category` = 'Food'.",
        "SQL": "SELECT SUM(spent) FROM `budget` WHERE category = 'Food';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 273,
        "db_id": "student_club",
        "question": "Which event has the highest budget amount?",
        "evidence": "Order `budget` by `amount` descending and limit to 1.",
        "SQL": "SELECT event_name FROM `event` e JOIN `budget` b ON e.event_id = b.link_to_event ORDER BY b.amount DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 274,
        "db_id": "student_club",
        "question": "List all members who attended the event 'Women's Soccer'.",
        "evidence": "Join `attendance` and `member` on `link_to_member` and filter by `event_name`.",
        "SQL": "SELECT m.first_name, m.last_name FROM `attendance` a JOIN `event` e ON a.link_to_event = e.event_id JOIN `member` m ON a.link_to_member = m.member_id WHERE e.event_name = 'Women's Soccer';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 275,
        "db_id": "student_club",
        "question": "What is the average cost of approved expenses?",
        "evidence": "Calculate average `cost` from `expense` where `approved` = 'true'.",
        "SQL": "SELECT AVG(cost) FROM `expense` WHERE approved = 'true';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 276,
        "db_id": "student_club",
        "question": "Which member has the largest number of approved expenses?",
        "evidence": "Count `expense` grouped by `link_to_member` and order by count descending.",
        "SQL": "SELECT m.first_name, m.last_name, COUNT(e.expense_id) as expense_count FROM `expense` e JOIN `member` m ON e.link_to_member = m.member_id WHERE e.approved = 'true' GROUP BY e.link_to_member ORDER BY expense_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 277,
        "db_id": "student_club",
        "question": "What is the total remaining budget for closed events?",
        "evidence": "Sum `remaining` from `budget` where `event_status` = 'Closed'.",
        "SQL": "SELECT SUM(remaining) FROM `budget` WHERE event_status = 'Closed';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 278,
        "db_id": "student_club",
        "question": "Find the member with the smallest zip code.",
        "evidence": "Order `member` by `zip` ascending and limit to 1.",
        "SQL": "SELECT first_name, last_name FROM `member` ORDER BY zip ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 279,
        "db_id": "student_club",
        "question": "How many members are associated with the 'College of Agriculture and Applied Sciences'?",
        "evidence": "Join `member` and `major` on `link_to_major` and filter by `college`.",
        "SQL": "SELECT COUNT(*) FROM `member` m JOIN `major` ma ON m.link_to_major = ma.major_id WHERE ma.college = 'College of Agriculture and Applied Sciences';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 280,
        "db_id": "student_club",
        "question": "What is the total income received from dues?",
        "evidence": "Sum `amount` from `income` where `source` = 'Dues'.",
        "SQL": "SELECT SUM(amount) FROM `income` WHERE source = 'Dues';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 281,
        "db_id": "student_club",
        "question": "Which event has the most attendees?",
        "evidence": "Count `attendance` grouped by `link_to_event` and order by count descending.",
        "SQL": "SELECT e.event_name, COUNT(a.link_to_member) as attendee_count FROM `attendance` a JOIN `event` e ON a.link_to_event = e.event_id GROUP BY a.link_to_event ORDER BY attendee_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 282,
        "db_id": "student_club",
        "question": "List all expenses made by the member with email 'luisa.guidi@lpu.edu'.",
        "evidence": "Join `expense` and `member` on `link_to_member` and filter by `email`.",
        "SQL": "SELECT e.expense_description, e.cost FROM `expense` e JOIN `member` m ON e.link_to_member = m.member_id WHERE m.email = 'luisa.guidi@lpu.edu';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 283,
        "db_id": "student_club",
        "question": "What is the most expensive approved expense?",
        "evidence": "Order `expense` by `cost` descending where `approved` = 'true' and limit to 1.",
        "SQL": "SELECT expense_description, cost FROM `expense` WHERE approved = 'true' ORDER BY cost DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 284,
        "db_id": "student_club",
        "question": "How many unique majors are there in the database?",
        "evidence": "Count distinct `major_name` from `major`.",
        "SQL": "SELECT COUNT(DISTINCT major_name) FROM `major`;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 285,
        "db_id": "student_club",
        "question": "Which member has the largest number of incomes recorded?",
        "evidence": "Count `income` grouped by `link_to_member` and order by count descending.",
        "SQL": "SELECT m.first_name, m.last_name, COUNT(i.income_id) as income_count FROM `income` i JOIN `member` m ON i.link_to_member = m.member_id GROUP BY i.link_to_member ORDER BY income_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 286,
        "db_id": "student_club",
        "question": "What is the total cost of expenses for the budget category 'Advertisement'?",
        "evidence": "Join `expense` and `budget` on `link_to_budget` and filter by `category`.",
        "SQL": "SELECT SUM(e.cost) FROM `expense` e JOIN `budget` b ON e.link_to_budget = b.budget_id WHERE b.category = 'Advertisement';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 287,
        "db_id": "student_club",
        "question": "Find the event with the earliest date.",
        "evidence": "Order `event` by `event_date` ascending and limit to 1.",
        "SQL": "SELECT event_name, event_date FROM `event` ORDER BY event_date ASC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 288,
        "db_id": "student_club",
        "question": "How many members have a t-shirt size of 'Medium'?",
        "evidence": "Count `member` where `t_shirt_size` = 'Medium'.",
        "SQL": "SELECT COUNT(*) FROM `member` WHERE t_shirt_size = 'Medium';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 289,
        "db_id": "student_club",
        "question": "What is the total amount of money spent on events that are closed?",
        "evidence": "Sum `spent` from `budget` where `event_status` = 'Closed'.",
        "SQL": "SELECT SUM(spent) FROM `budget` WHERE event_status = 'Closed';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 290,
        "db_id": "student_club",
        "question": "Which city has the most members?",
        "evidence": "Join `member` and `zip_code` on `zip` and group by `city`.",
        "SQL": "SELECT z.city, COUNT(m.member_id) as member_count FROM `member` m JOIN `zip_code` z ON m.zip = z.zip_code GROUP BY z.city ORDER BY member_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 291,
        "db_id": "student_club",
        "question": "List all events that took place in 'MU 215'.",
        "evidence": "Filter `event` by `location` = 'MU 215'.",
        "SQL": "SELECT event_name, event_date FROM `event` WHERE location = 'MU 215';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 292,
        "db_id": "student_club",
        "question": "What is the total number of expenses linked to the budget with the highest amount?",
        "evidence": "Find `budget` with max `amount` and count `expense` linked to it.",
        "SQL": "SELECT COUNT(e.expense_id) FROM `expense` e WHERE e.link_to_budget = (SELECT budget_id FROM `budget` ORDER BY amount DESC LIMIT 1);",
        "difficulty": "challenge",
        "question_type": "nested"
    },
    {
        "question_id": 293,
        "db_id": "student_club",
        "question": "How many members have a position of 'Member'?",
        "evidence": "Count `member` where `position` = 'Member'.",
        "SQL": "SELECT COUNT(*) FROM `member` WHERE position = 'Member';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 294,
        "db_id": "student_club",
        "question": "Which major has the most students?",
        "evidence": "Join `member` and `major` on `link_to_major` and group by `major_name`.",
        "SQL": "SELECT ma.major_name, COUNT(m.member_id) as student_count FROM `member` m JOIN `major` ma ON m.link_to_major = ma.major_id GROUP BY ma.major_name ORDER BY student_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 295,
        "db_id": "student_club",
        "question": "What is the total cost of all expenses made in 2019?",
        "evidence": "Sum `cost` from `expense` where `expense_date` LIKE '2019-%'.",
        "SQL": "SELECT SUM(cost) FROM `expense` WHERE expense_date LIKE '2019-%';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 296,
        "db_id": "student_club",
        "question": "Find the member with the highest total income.",
        "evidence": "Sum `amount` from `income` grouped by `link_to_member` and order by sum descending.",
        "SQL": "SELECT m.first_name, m.last_name, SUM(i.amount) as total_income FROM `income` i JOIN `member` m ON i.link_to_member = m.member_id GROUP BY i.link_to_member ORDER BY total_income DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 297,
        "db_id": "student_club",
        "question": "What is the average remaining budget for open events?",
        "evidence": "Calculate average `remaining` from `budget` where `event_status` = 'Open'.",
        "SQL": "SELECT AVG(remaining) FROM `budget` WHERE event_status = 'Open';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 298,
        "db_id": "student_club",
        "question": "List all members who have approved expenses.",
        "evidence": "Join `expense` and `member` on `link_to_member` and filter by `approved` = 'true'.",
        "SQL": "SELECT DISTINCT m.first_name, m.last_name FROM `expense` e JOIN `member` m ON e.link_to_member = m.member_id WHERE e.approved = 'true';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 299,
        "db_id": "student_club",
        "question": "What is the total number of events held in 2020?",
        "evidence": "Count `event` where `event_date` LIKE '2020-%'.",
        "SQL": "SELECT COUNT(*) FROM `event` WHERE event_date LIKE '2020-%';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 300,
        "db_id": "financial",
        "question": "What is the total amount of orders with the k_symbol 'SIPO'?",
        "evidence": "Total amount for orders with k_symbol 'SIPO' can be calculated using SUM(amount) WHERE k_symbol = 'SIPO'",
        "SQL": "SELECT SUM(amount) FROM `order` WHERE k_symbol = 'SIPO';",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 301,
        "db_id": "financial",
        "question": "How many accounts are there in district 1?",
        "evidence": "Count accounts with district_id = 1 using COUNT(*) WHERE district_id = 1",
        "SQL": "SELECT COUNT(*) FROM account WHERE district_id = 1;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 302,
        "db_id": "financial",
        "question": "What is the average loan amount for loans with status 'A'?",
        "evidence": "Average loan amount for status 'A' can be calculated using AVG(amount) WHERE status = 'A'",
        "SQL": "SELECT AVG(amount) FROM loan WHERE status = 'A';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 303,
        "db_id": "financial",
        "question": "Which district has the highest number of clients?",
        "evidence": "Count clients per district using COUNT(client_id) GROUP BY district_id ORDER BY COUNT(client_id) DESC LIMIT 1",
        "SQL": "SELECT district_id, COUNT(client_id) as client_count FROM client GROUP BY district_id ORDER BY client_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 304,
        "db_id": "financial",
        "question": "List all transactions made in January 1996.",
        "evidence": "Transactions in January 1996 can be found using date LIKE '1996-01%'",
        "SQL": "SELECT * FROM trans WHERE date LIKE '1996-01%';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 305,
        "db_id": "financial",
        "question": "What is the total balance of all accounts?",
        "evidence": "Total balance can be calculated using SUM(balance) from trans table",
        "SQL": "SELECT SUM(balance) FROM trans;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 306,
        "db_id": "financial",
        "question": "Which client has the earliest birth date?",
        "evidence": "Earliest birth date can be found using MIN(birth_date)",
        "SQL": "SELECT client_id, MIN(birth_date) FROM client;",
        "difficulty": "moderate",
        "question_type": "exact"
    },
    {
        "question_id": 307,
        "db_id": "financial",
        "question": "What is the most common frequency of account usage?",
        "evidence": "Most common frequency can be found using COUNT(frequency) GROUP BY frequency ORDER BY COUNT(frequency) DESC LIMIT 1",
        "SQL": "SELECT frequency, COUNT(frequency) as freq_count FROM account GROUP BY frequency ORDER BY freq_count DESC LIMIT 1;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 308,
        "db_id": "financial",
        "question": "How many loans have a duration of 12 months?",
        "evidence": "Count loans with duration = 12 using COUNT(*) WHERE duration = 12",
        "SQL": "SELECT COUNT(*) FROM loan WHERE duration = 12;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 309,
        "db_id": "financial",
        "question": "What is the total amount of non-credit card withdrawals in January 1996?",
        "evidence": "Non-credit card withdrawals are type = 'VYDAJ' and date LIKE '1996-01%'",
        "SQL": "SELECT SUM(amount) FROM trans WHERE type = 'VYDAJ' AND date LIKE '1996-01%';",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 310,
        "db_id": "financial",
        "question": "Which account has the highest balance?",
        "evidence": "Highest balance can be found using MAX(balance)",
        "SQL": "SELECT account_id, MAX(balance) FROM trans;",
        "difficulty": "moderate",
        "question_type": "ranking"
    },
    {
        "question_id": 311,
        "db_id": "financial",
        "question": "What is the total number of cards issued before 1996?",
        "evidence": "Count cards issued before 1996 using COUNT(*) WHERE issued < '1996-01-01'",
        "SQL": "SELECT COUNT(*) FROM card WHERE issued < '1996-01-01';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 312,
        "db_id": "financial",
        "question": "Which district has the highest average loan amount?",
        "evidence": "Average loan amount per district can be calculated using AVG(amount) JOIN loan and account tables GROUP BY district_id ORDER BY AVG(amount) DESC LIMIT 1",
        "SQL": "SELECT a.district_id, AVG(l.amount) as avg_loan FROM loan l JOIN account a ON l.account_id = a.account_id GROUP BY a.district_id ORDER BY avg_loan DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 313,
        "db_id": "financial",
        "question": "How many clients are there in the district with the name 'Prague'?",
        "evidence": "Find district_id for 'Prague' and count clients with that district_id",
        "SQL": "SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague');",
        "difficulty": "moderate",
        "question_type": "nested"
    },
    {
        "question_id": 314,
        "db_id": "financial",
        "question": "What is the total amount of loans for accounts in district 5?",
        "evidence": "Total loan amount for district 5 can be calculated using SUM(amount) JOIN loan and account tables WHERE district_id = 5",
        "SQL": "SELECT SUM(l.amount) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.district_id = 5;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 315,
        "db_id": "financial",
        "question": "Which client has the most accounts?",
        "evidence": "Count accounts per client using COUNT(account_id) JOIN disp table GROUP BY client_id ORDER BY COUNT(account_id) DESC LIMIT 1",
        "SQL": "SELECT d.client_id, COUNT(d.account_id) as account_count FROM disp d GROUP BY d.client_id ORDER BY account_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 316,
        "db_id": "financial",
        "question": "What is the average balance of accounts with more than 3 transactions?",
        "evidence": "Average balance for accounts with more than 3 transactions can be calculated using AVG(balance) with HAVING COUNT(trans_id) > 3",
        "SQL": "SELECT AVG(t.balance) FROM trans t GROUP BY t.account_id HAVING COUNT(t.trans_id) > 3;",
        "difficulty": "challenge",
        "question_type": "aggregation"
    },
    {
        "question_id": 317,
        "db_id": "financial",
        "question": "How many orders were made to bank 'YZ'?",
        "evidence": "Count orders with bank_to = 'YZ' using COUNT(*) WHERE bank_to = 'YZ'",
        "SQL": "SELECT COUNT(*) FROM `order` WHERE bank_to = 'YZ';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 318,
        "db_id": "financial",
        "question": "What is the total amount of transactions for account 1?",
        "evidence": "Total transaction amount for account 1 can be calculated using SUM(amount) WHERE account_id = 1",
        "SQL": "SELECT SUM(amount) FROM trans WHERE account_id = 1;",
        "difficulty": "simple",
        "question_type": "aggregation"
    },
    {
        "question_id": 319,
        "db_id": "financial",
        "question": "Which client has the highest total loan amount?",
        "evidence": "Total loan amount per client can be calculated using SUM(amount) JOIN loan, account, and disp tables GROUP BY client_id ORDER BY SUM(amount) DESC LIMIT 1",
        "SQL": "SELECT d.client_id, SUM(l.amount) as total_loan FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id GROUP BY d.client_id ORDER BY total_loan DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 320,
        "db_id": "financial",
        "question": "What is the average age of clients in district 1?",
        "evidence": "Average age can be calculated using AVG(YEAR(CURRENT_DATE) - YEAR(birth_date)) WHERE district_id = 1",
        "SQL": "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(birth_date)) FROM client WHERE district_id = 1;",
        "difficulty": "moderate",
        "question_type": "aggregation"
    },
    {
        "question_id": 321,
        "db_id": "financial",
        "question": "How many transactions were made with the operation 'VKLAD'?",
        "evidence": "Count transactions with operation = 'VKLAD' using COUNT(*) WHERE operation = 'VKLAD'",
        "SQL": "SELECT COUNT(*) FROM trans WHERE operation = 'VKLAD';",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 322,
        "db_id": "financial",
        "question": "Which account has the lowest total transaction amount?",
        "evidence": "Total transaction amount per account can be calculated using SUM(amount) GROUP BY account_id ORDER BY SUM(amount) ASC LIMIT 1",
        "SQL": "SELECT account_id, SUM(amount) as total_amount FROM trans GROUP BY account_id ORDER BY total_amount ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "ranking"
    },
    {
        "question_id": 323,
        "db_id": "financial",
        "question": "What is the total number of clients with a 'gold' card?",
        "evidence": "Count clients with 'gold' card using COUNT(DISTINCT client_id) JOIN card and disp tables WHERE type = 'gold'",
        "SQL": "SELECT COUNT(DISTINCT d.client_id) FROM card c JOIN disp d ON c.disp_id = d.disp_id WHERE c.type = 'gold';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 324,
        "db_id": "financial",
        "question": "What is the total amount of loans for accounts with frequency 'POPLATEK MESICNE'?",
        "evidence": "Total loan amount for accounts with frequency 'POPLATEK MESICNE' can be calculated using SUM(amount) JOIN loan and account tables WHERE frequency = 'POPLATEK MESICNE'",
        "SQL": "SELECT SUM(l.amount) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.frequency = 'POPLATEK MESICNE';",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 325,
        "db_id": "financial",
        "question": "Which district has the lowest average balance?",
        "evidence": "Average balance per district can be calculated using AVG(balance) JOIN trans and account tables GROUP BY district_id ORDER BY AVG(balance) ASC LIMIT 1",
        "SQL": "SELECT a.district_id, AVG(t.balance) as avg_balance FROM trans t JOIN account a ON t.account_id = a.account_id GROUP BY a.district_id ORDER BY avg_balance ASC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 326,
        "db_id": "financial",
        "question": "How many orders have an amount greater than 3000?",
        "evidence": "Count orders with amount > 3000 using COUNT(*) WHERE amount > 3000",
        "SQL": "SELECT COUNT(*) FROM `order` WHERE amount > 3000;",
        "difficulty": "simple",
        "question_type": "exact"
    },
    {
        "question_id": 327,
        "db_id": "financial",
        "question": "What is the total number of transactions for accounts in district 18?",
        "evidence": "Count transactions for accounts in district 18 using COUNT(*) JOIN trans and account tables WHERE district_id = 18",
        "SQL": "SELECT COUNT(*) FROM trans t JOIN account a ON t.account_id = a.account_id WHERE a.district_id = 18;",
        "difficulty": "moderate",
        "question_type": "multi-table"
    },
    {
        "question_id": 328,
        "db_id": "financial",
        "question": "Which client has the most loans?",
        "evidence": "Count loans per client using COUNT(loan_id) JOIN loan, account, and disp tables GROUP BY client_id ORDER BY COUNT(loan_id) DESC LIMIT 1",
        "SQL": "SELECT d.client_id, COUNT(l.loan_id) as loan_count FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id GROUP BY d.client_id ORDER BY loan_count DESC LIMIT 1;",
        "difficulty": "challenge",
        "question_type": "multi-table"
    },
    {
        "question_id": 329,
        "db_id": "financial",
        "question": "What is the total amount of transactions with k_symbol 'SIPO'?",
        "evidence": "Total transaction amount with k_symbol 'SIPO' can be calculated using SUM(amount) WHERE k_symbol = 'SIPO'",
        "SQL": "SELECT SUM(amount) FROM trans WHERE k_symbol = 'SIPO';",
        "difficulty": "simple",
        "question_type": "aggregation"
    }
]